// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/SparseCPUType.h>

// @generated by aten/src/ATen/gen.py

#include <ATen/CPUGenerator.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>


namespace at {

Tensor SparseCPUType::add(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & SparseCPUType::add_(Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor & SparseCPUType::add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out(out, self, other, alpha);
}
Tensor SparseCPUType::empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_sparse(size, options, memory_format);
}
Tensor & SparseCPUType::log1p_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p_sparse_(self);
}
Tensor & SparseCPUType::log1p_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p_out_sparse(out, self);
}
Tensor SparseCPUType::mm(const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("mm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_mm(self, mat2);
}
Tensor & SparseCPUType::mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat2.has_names()) {
        AT_ERROR("mm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_mm_out(out, self, mat2);
}
Tensor SparseCPUType::mul(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & SparseCPUType::mul_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor & SparseCPUType::mul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out(out, self, other);
}
Tensor SparseCPUType::narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("narrow_copy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_sparse(self, dim, start, length);
}
Tensor & SparseCPUType::_sparse_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_sparse_add_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out_sparse_cpu(out, self, other, alpha);
}
Tensor & SparseCPUType::_sparse_div_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_sparse_div_zerodim_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_out_sparse_zerodim(out, self, other);
}
Tensor & SparseCPUType::_sparse_div_scalar_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_sparse_div_scalar_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_out_sparse_scalar(out, self, other);
}
Tensor & SparseCPUType::_sparse_mul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_sparse_mul_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out_sparse_cpu(out, self, other);
}
Tensor & SparseCPUType::_sparse_mul_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_sparse_mul_zerodim_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out_sparse_zerodim(out, self, other);
}
Tensor & SparseCPUType::_sparse_mul_scalar_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_sparse_mul_scalar_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out_sparse_scalar(out, self, other);
}
Tensor & SparseCPUType::sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("sspaddmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sspaddmm_out_cpu(out, self, mat1, mat2, beta, alpha);
}
Tensor SparseCPUType::native_norm(const Tensor & self, Scalar p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("native_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_sparse(self, p);
}
Tensor SparseCPUType::_sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || self.has_names()) {
        AT_ERROR("_sparse_sum_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum_backward_cpu(grad, self, dim);
}
Tensor SparseCPUType::clone(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clone_sparse(self);
}
Tensor & SparseCPUType::resize_as_(Tensor & self, const Tensor & the_template) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || the_template.has_names()) {
        AT_ERROR("resize_as_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::resize_as_sparse_(self, the_template);
}
Tensor & SparseCPUType::pow_out(Tensor & out, const Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_out_sparse_scalar(out, self, exponent);
}
Tensor SparseCPUType::pow(const Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_sparse_scalar(self, exponent);
}
Tensor & SparseCPUType::zero_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::zero_sparse_(self);
}
Tensor SparseCPUType::_sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::new_with_dims_sparse(sparse_dim, dense_dim, size, options);
}
Tensor SparseCPUType::_sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("_sparse_coo_tensor_with_dims_and_tensors: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::new_with_dims_and_tensor_sparse(sparse_dim, dense_dim, size, indices, values, options);
}
Tensor & SparseCPUType::sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("sparse_resize_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_resize_(self, size, sparse_dim, dense_dim);
}
Tensor & SparseCPUType::sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("sparse_resize_and_clear_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_resize_and_clear_(self, size, sparse_dim, dense_dim);
}
Tensor SparseCPUType::to_dense(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("to_dense: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_to_dense(self);
}
int64_t SparseCPUType::sparse_dim(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("sparse_dim: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::sparse_dim_sparse(self);
}
int64_t SparseCPUType::_dimI(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_dimI: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::sparse_dim_sparse(self);
}
int64_t SparseCPUType::dense_dim(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("dense_dim: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::dense_dim_sparse(self);
}
int64_t SparseCPUType::_dimV(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_dimV: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::dense_dim_sparse(self);
}
int64_t SparseCPUType::_nnz(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_nnz: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::_nnz_sparse(self);
}
Tensor SparseCPUType::coalesce(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("coalesce: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::coalesce_sparse_cpu(self);
}
bool SparseCPUType::is_coalesced(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::is_coalesced_sparse(self);
}
Tensor SparseCPUType::_indices(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_indices: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::_indices_sparse(self);
}
Tensor SparseCPUType::_values(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_values: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::_values_sparse(self);
}
Tensor & SparseCPUType::_coalesced_(Tensor & self, bool coalesced) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_coalesced_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::_coalesced_sparse_(self, coalesced);
}
Tensor SparseCPUType::indices(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("indices: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::indices_sparse(self);
}
Tensor SparseCPUType::values(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("values: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::values_sparse(self);
}
Tensor & SparseCPUType::hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("hspmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::hspmm_out_sparse_cpu(out, mat1, mat2);
}
Tensor SparseCPUType::hspmm(const Tensor & mat1, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (mat1.has_names() || mat2.has_names()) {
        AT_ERROR("hspmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(mat1));
    return at::native::hspmm_sparse_cpu(mat1, mat2);
}
Tensor & SparseCPUType::copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || src.has_names()) {
        AT_ERROR("copy_sparse_to_sparse_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::copy_sparse_(self, src, non_blocking);
}

static auto& registerer = globalATenDispatch()
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor", &SparseCPUType::add)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)", &SparseCPUType::add_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::add_out)
  .registerOp<Tensor (IntArrayRef, const TensorOptions &, c10::optional<MemoryFormat>)>(Backend::SparseCPU, "aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor", &SparseCPUType::empty)
  .registerOp<Tensor & (Tensor &)>(Backend::SparseCPU, "aten::log1p_(Tensor(a!) self) -> Tensor(a!)", &SparseCPUType::log1p_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::log1p_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::mm(Tensor self, Tensor mat2) -> Tensor", &SparseCPUType::mm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::mm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::mul.Tensor(Tensor self, Tensor other) -> Tensor", &SparseCPUType::mul)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SparseCPUType::mul_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::mul_out)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::SparseCPU, "aten::narrow_copy(Tensor self, int dim, int start, int length) -> Tensor", &SparseCPUType::narrow_copy)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::_sparse_add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::_sparse_add_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::_sparse_div_zerodim.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::_sparse_div_zerodim_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::_sparse_div_scalar.out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::_sparse_div_scalar_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::_sparse_mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::_sparse_mul_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::_sparse_mul_zerodim.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::_sparse_mul_zerodim_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::_sparse_mul_scalar.out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::_sparse_mul_scalar_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::SparseCPU, "aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::sspaddmm_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::SparseCPU, "aten::native_norm(Tensor self, Scalar p=2) -> Tensor", &SparseCPUType::native_norm)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::SparseCPU, "aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor", &SparseCPUType::_sparse_sum_backward)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::clone(Tensor self) -> Tensor", &SparseCPUType::clone)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::resize_as_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)", &SparseCPUType::resize_as_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::SparseCPU, "aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::pow_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::SparseCPU, "aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor", &SparseCPUType::pow)
  .registerOp<Tensor & (Tensor &)>(Backend::SparseCPU, "aten::zero_(Tensor(a!) self) -> Tensor(a!)", &SparseCPUType::zero_)
  .registerOp<Tensor (int64_t, int64_t, IntArrayRef, const TensorOptions &)>(Backend::SparseCPU, "aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &SparseCPUType::_sparse_coo_tensor_with_dims)
  .registerOp<Tensor (int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, const TensorOptions &)>(Backend::SparseCPU, "aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &SparseCPUType::_sparse_coo_tensor_with_dims_and_tensors)
  .registerOp<Tensor & (Tensor &, IntArrayRef, int64_t, int64_t)>(Backend::SparseCPU, "aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)", &SparseCPUType::sparse_resize_)
  .registerOp<Tensor & (Tensor &, IntArrayRef, int64_t, int64_t)>(Backend::SparseCPU, "aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)", &SparseCPUType::sparse_resize_and_clear_)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::to_dense(Tensor self) -> Tensor", &SparseCPUType::to_dense)
  .registerOp<int64_t (const Tensor &)>(Backend::SparseCPU, "aten::sparse_dim(Tensor self) -> int", &SparseCPUType::sparse_dim)
  .registerOp<int64_t (const Tensor &)>(Backend::SparseCPU, "aten::_dimI(Tensor self) -> int", &SparseCPUType::_dimI)
  .registerOp<int64_t (const Tensor &)>(Backend::SparseCPU, "aten::dense_dim(Tensor self) -> int", &SparseCPUType::dense_dim)
  .registerOp<int64_t (const Tensor &)>(Backend::SparseCPU, "aten::_dimV(Tensor self) -> int", &SparseCPUType::_dimV)
  .registerOp<int64_t (const Tensor &)>(Backend::SparseCPU, "aten::_nnz(Tensor self) -> int", &SparseCPUType::_nnz)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::coalesce(Tensor self) -> Tensor", &SparseCPUType::coalesce)
  .registerOp<bool (const Tensor &)>(Backend::SparseCPU, "aten::is_coalesced(Tensor self) -> bool", &SparseCPUType::is_coalesced)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::_indices(Tensor(a) self) -> Tensor(a)", &SparseCPUType::_indices)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::_values(Tensor(a) self) -> Tensor(a)", &SparseCPUType::_values)
  .registerOp<Tensor & (Tensor &, bool)>(Backend::SparseCPU, "aten::_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)", &SparseCPUType::_coalesced_)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::indices(Tensor(a) self) -> Tensor(a)", &SparseCPUType::indices)
  .registerOp<Tensor (const Tensor &)>(Backend::SparseCPU, "aten::values(Tensor(a) self) -> Tensor(a)", &SparseCPUType::values)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)", &SparseCPUType::hspmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::SparseCPU, "aten::hspmm(Tensor mat1, Tensor mat2) -> Tensor", &SparseCPUType::hspmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, bool)>(Backend::SparseCPU, "aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)", &SparseCPUType::copy_sparse_to_sparse_);

}
