#include <ATen/TypeDefault.h>

// @generated by aten/src/ATen/gen.py

#include <ATen/DeviceGuard.h>
#include <ATen/ExpandUtils.h>
#include <ATen/Functions.h>
#ifdef BUILD_NAMEDTENSOR
#include <ATen/NamedTensorUtils.h>
#endif
#include <ATen/NativeFunctions.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <ATen/Tensor.h>
#include <c10/core/TensorOptions.h>
#include <ATen/DeviceGuard.h>
#include <ATen/SparseTensorUtils.h>
#include <ATen/core/ATenDispatch.h>

namespace at {

Tensor TypeDefault::_cast_Byte(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Byte: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Byte(self, non_blocking);
}
Tensor TypeDefault::_cast_Char(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Char: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Char(self, non_blocking);
}
Tensor TypeDefault::_cast_Double(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Double: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Double(self, non_blocking);
}
Tensor TypeDefault::_cast_Float(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Float: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Float(self, non_blocking);
}
Tensor TypeDefault::_cast_Int(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Int: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Int(self, non_blocking);
}
Tensor TypeDefault::_cast_Long(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Long: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Long(self, non_blocking);
}
Tensor TypeDefault::_cast_Short(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Short: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Short(self, non_blocking);
}
Tensor TypeDefault::_cast_Half(const Tensor & self, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cast_Half: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Half(self, non_blocking);
}
void TypeDefault::backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || gradient.has_names()) {
        AT_ERROR("backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::backward(self, gradient, keep_graph, create_graph);
}
void TypeDefault::set_data(const Tensor & self, const Tensor & new_data) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || new_data.has_names()) {
        AT_ERROR("set_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::set_data(self, new_data);
}
#ifdef BUILD_NAMEDTENSOR
Tensor & TypeDefault::names_(Tensor & self, c10::optional<DimnameList> names) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::names_(self, names);
}
#endif
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::view_names(const Tensor & self, c10::optional<DimnameList> names) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::view_names(self, names);
}
#endif
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::align_to(const Tensor & self, DimnameList names) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, names);
}
#endif
#ifdef BUILD_NAMEDTENSOR
std::vector<Tensor> TypeDefault::align_tensors(TensorList tensors) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::align_tensors(tensors);
}
#endif
int64_t TypeDefault::_debug_has_internal_overlap(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_debug_has_internal_overlap: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_debug_has_internal_overlap(self);
}
std::tuple<Tensor,Tensor> TypeDefault::_sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (quasi.has_names() || sobolstate.has_names()) {
        AT_ERROR("_sobol_engine_draw: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(quasi));
    return at::native::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);
}
Tensor & TypeDefault::_sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || sobolstate.has_names()) {
        AT_ERROR("_sobol_engine_ff_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);
}
Tensor & TypeDefault::_sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || ltm.has_names()) {
        AT_ERROR("_sobol_engine_scramble_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_scramble_(self, ltm, dimension);
}
Tensor & TypeDefault::_sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_sobol_engine_initialize_state_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_initialize_state_(self, dimension);
}
Tensor TypeDefault::_reshape_from_tensor(const Tensor & self, const Tensor & shape) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || shape.has_names()) {
        AT_ERROR("_reshape_from_tensor: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reshape_from_tensor(self, shape);
}
Tensor TypeDefault::_shape_as_tensor(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_shape_as_tensor: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_shape_as_tensor(self);
}
Tensor TypeDefault::dropout(const Tensor & input, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::dropout(input, p, train);
}
Tensor & TypeDefault::dropout_(Tensor & self, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dropout_(self, p, train);
}
Tensor TypeDefault::feature_dropout(const Tensor & input, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("feature_dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_dropout(input, p, train);
}
Tensor & TypeDefault::feature_dropout_(Tensor & self, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("feature_dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_dropout_(self, p, train);
}
Tensor TypeDefault::alpha_dropout(const Tensor & input, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("alpha_dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::alpha_dropout(input, p, train);
}
Tensor & TypeDefault::alpha_dropout_(Tensor & self, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("alpha_dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alpha_dropout_(self, p, train);
}
Tensor TypeDefault::feature_alpha_dropout(const Tensor & input, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("feature_alpha_dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_alpha_dropout(input, p, train);
}
Tensor & TypeDefault::feature_alpha_dropout_(Tensor & self, double p, bool train) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("feature_alpha_dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_alpha_dropout_(self, p, train);
}
Tensor TypeDefault::abs(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs(self);
}
Tensor TypeDefault::acos(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos(self);
}
Tensor TypeDefault::avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("avg_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor TypeDefault::adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("adaptive_avg_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool1d(self, output_size);
}
std::tuple<Tensor,Tensor> TypeDefault::adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("adaptive_max_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool1d(self, output_size);
}
Tensor TypeDefault::add(const Tensor & self, Scalar other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & TypeDefault::add_(Tensor & self, Scalar other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor TypeDefault::addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("addr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr(self, vec1, vec2, beta, alpha);
}
Tensor & TypeDefault::addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("addr_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_(self, vec1, vec2, beta, alpha);
}
Tensor & TypeDefault::addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("addr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor TypeDefault::affine_grid_generator(const Tensor & theta, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (theta.has_names()) {
        AT_ERROR("affine_grid_generator: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::affine_grid_generator(theta, size);
}
Tensor TypeDefault::affine_grid_generator_backward(const Tensor & grad, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names()) {
        AT_ERROR("affine_grid_generator_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::affine_grid_generator_backward(grad, size);
}
Tensor TypeDefault::all(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("all: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & TypeDefault::all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("all_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
bool TypeDefault::allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("allclose: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::allclose(self, other, rtol, atol, equal_nan);
}
Tensor TypeDefault::any(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("any: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & TypeDefault::any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("any_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor TypeDefault::arange(Scalar end, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::arange(end, options);
}
Tensor TypeDefault::arange(Scalar start, Scalar end, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, options);
}
Tensor TypeDefault::arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, step, options);
}
Tensor & TypeDefault::arange_out(Tensor & out, Scalar end) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("arange_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_out(out, end);
}
Tensor TypeDefault::_dim_arange(const Tensor & like, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (like.has_names()) {
        AT_ERROR("_dim_arange: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(like));
    return at::native::_dim_arange(like, dim);
}
Tensor TypeDefault::argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("argmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argmax(self, dim, keepdim);
}
Tensor TypeDefault::argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("argmin: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argmin(self, dim, keepdim);
}
Tensor & TypeDefault::as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("as_strided_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::as_strided_(self, size, stride, storage_offset);
}
Tensor TypeDefault::asin(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin(self);
}
Tensor TypeDefault::atan(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan(self);
}
Tensor & TypeDefault::_baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("_baddbmm_mkl_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);
}
Tensor TypeDefault::bartlett_window(int64_t window_length, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, options);
}
Tensor TypeDefault::bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, periodic, options);
}
Tensor TypeDefault::batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor,int64_t> TypeDefault::_batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("_batch_norm_impl_index: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::_batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grad_output.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_var_transform.has_names()) {
        AT_ERROR("_batch_norm_impl_index_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask);
}
Tensor TypeDefault::bernoulli(const Tensor & self, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, generator);
}
Tensor & TypeDefault::bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_out(out, self, generator);
}
Tensor TypeDefault::bernoulli(const Tensor & self, double p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("bernoulli: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, p, generator);
}
Tensor TypeDefault::bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input1.has_names() || input2.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("bilinear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::bilinear(input1, input2, weight, bias);
}
Tensor TypeDefault::binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {
        AT_ERROR("binary_cross_entropy_with_logits: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);
}
Tensor TypeDefault::binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {
        AT_ERROR("binary_cross_entropy_with_logits_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);
}
Tensor TypeDefault::bitwise_not(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("bitwise_not: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not(self);
}
Tensor & TypeDefault::bitwise_not_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("bitwise_not_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_(self);
}
Tensor TypeDefault::logical_not(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("logical_not: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not(self);
}
Tensor & TypeDefault::logical_not_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("logical_not_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_(self);
}
Tensor TypeDefault::logical_xor(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor(self, other);
}
Tensor & TypeDefault::logical_xor_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor_(self, other);
}
Tensor TypeDefault::blackman_window(int64_t window_length, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, options);
}
Tensor TypeDefault::blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, periodic, options);
}
std::vector<Tensor> TypeDefault::broadcast_tensors(TensorList tensors) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("broadcast_tensors: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::broadcast_tensors(tensors);
}
Tensor TypeDefault::cat(TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("cat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & TypeDefault::cat_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR("cat_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor TypeDefault::ceil(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil(self);
}
Tensor TypeDefault::chain_matmul(TensorList matrices) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(matrices)) {
        AT_ERROR("chain_matmul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(matrices));
    return at::native::chain_matmul(matrices);
}
std::vector<Tensor> TypeDefault::chunk(const Tensor & self, int64_t chunks, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::chunk(self, chunks, dim);
}
Tensor TypeDefault::clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp(self, min, max);
}
Tensor TypeDefault::clamp_max(const Tensor & self, Scalar max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max(self, max);
}
Tensor TypeDefault::clamp_min(const Tensor & self, Scalar min) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min(self, min);
}
bool TypeDefault::cudnn_is_acceptable(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("cudnn_is_acceptable: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::cudnn_is_acceptable(self);
}
Tensor TypeDefault::constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("constant_pad_nd: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::constant_pad_nd(self, pad, value);
}
Tensor TypeDefault::contiguous(const Tensor & self, MemoryFormat memory_format) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::contiguous(self, memory_format);
}
Tensor TypeDefault::convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
Tensor TypeDefault::_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
}
Tensor TypeDefault::_convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("_convolution_nogroup: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::_convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (ggI.has_names() || ggW.has_names() || ggb.has_names() || gO.has_names() || weight.has_names() || self.has_names()) {
        AT_ERROR("_convolution_double_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
}
Tensor TypeDefault::conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv1d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor TypeDefault::conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv2d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor TypeDefault::conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv3d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor TypeDefault::conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_tbc: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc(self, weight, bias, pad);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_tbc_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc_backward(self, input, weight, bias, pad);
}
Tensor TypeDefault::conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_transpose1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor TypeDefault::conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_transpose2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose2d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor TypeDefault::conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_transpose3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose3d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor & TypeDefault::copy_(Tensor & self, const Tensor & src, bool non_blocking) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::copy_(self, src, non_blocking);
}
Tensor TypeDefault::cos(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos(self);
}
Tensor TypeDefault::cosh(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh(self);
}
Tensor TypeDefault::cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (input1.has_names() || input2.has_names() || target.has_names()) {
        AT_ERROR("cosine_embedding_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::cosine_embedding_loss(input1, input2, target, margin, reduction);
}
Tensor TypeDefault::cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("cumsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & TypeDefault::cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("cumsum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor TypeDefault::cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("cumprod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & TypeDefault::cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("cumprod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor TypeDefault::ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
#ifdef BUILD_NAMEDTENSOR
    if (log_probs.has_names() || targets.has_names()) {
        AT_ERROR("ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor TypeDefault::ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
#ifdef BUILD_NAMEDTENSOR
    if (log_probs.has_names() || targets.has_names() || input_lengths.has_names() || target_lengths.has_names()) {
        AT_ERROR("ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor TypeDefault::det(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("det: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::det(self);
}
Tensor TypeDefault::diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("diag_embed: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag_embed(self, offset, dim1, dim2);
}
Tensor TypeDefault::diagflat(const Tensor & self, int64_t offset) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("diagflat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagflat(self, offset);
}
Tensor TypeDefault::diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("diagonal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, offset, dim1, dim2);
}
Tensor & TypeDefault::fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fill_diagonal_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_diagonal_(self, fill_value, wrap);
}
Tensor TypeDefault::div(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(self, other);
}
Tensor & TypeDefault::div_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(self, other);
}
Tensor & TypeDefault::div_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_out(out, self, other);
}
Tensor TypeDefault::div(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(self, other);
}
Tensor & TypeDefault::div_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(self, other);
}
Tensor & TypeDefault::dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || tensor.has_names()) {
        AT_ERROR("dot_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dot_out(out, self, tensor);
}
Tensor TypeDefault::einsum(std::string equation, TensorList tensors) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("einsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::einsum(equation, tensors);
}
Tensor TypeDefault::embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
#ifdef BUILD_NAMEDTENSOR
    if (weight.has_names() || indices.has_names()) {
        AT_ERROR("embedding: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);
}
Tensor TypeDefault::embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || indices.has_names()) {
        AT_ERROR("embedding_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
}
Tensor TypeDefault::embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || indices.has_names()) {
        AT_ERROR("embedding_sparse_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> TypeDefault::embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
#ifdef BUILD_NAMEDTENSOR
    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("embedding_bag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor TypeDefault::_embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || maximum_indices.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor TypeDefault::_embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag_sparse_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::empty(size, names, options, memory_format);
}
#endif
Tensor & TypeDefault::empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("empty_out: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::empty_out(out, size, memory_format);
}
Tensor TypeDefault::empty_like(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::empty_like(self);
}
Tensor TypeDefault::empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::empty_like(self, options, memory_format);
}
Tensor TypeDefault::erf(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf(self);
}
Tensor TypeDefault::erfc(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc(self);
}
Tensor TypeDefault::exp(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp(self);
}
Tensor TypeDefault::expm1(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1(self);
}
Tensor TypeDefault::expand(const Tensor & self, IntArrayRef size, bool implicit) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("expand: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::expand(self, size, implicit);
}
Tensor TypeDefault::expand_as(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("expand_as: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::expand_as(self, other);
}
Tensor TypeDefault::eye(int64_t n, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, options);
}
Tensor TypeDefault::eye(int64_t n, int64_t m, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, m, options);
}
Tensor TypeDefault::flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("flatten: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim);
}
Tensor & TypeDefault::fill_(Tensor & self, Scalar value) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor & TypeDefault::fill_(Tensor & self, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor TypeDefault::floor(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor(self);
}
Tensor TypeDefault::frac(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac(self);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::full(size, fill_value, names, options);
}
#endif
Tensor TypeDefault::full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::full(size, fill_value, options);
}
Tensor & TypeDefault::full_out(Tensor & out, IntArrayRef size, Scalar fill_value) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("full_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::full_out(out, size, fill_value);
}
Tensor TypeDefault::full_like(const Tensor & self, Scalar fill_value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("full_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::full_like(self, fill_value);
}
Tensor TypeDefault::full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("full_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::full_like(self, fill_value, options);
}
Tensor TypeDefault::grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler(input, grid, interpolation_mode, padding_mode);
}
Tensor TypeDefault::hann_window(int64_t window_length, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, options);
}
Tensor TypeDefault::hann_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, periodic, options);
}
Tensor TypeDefault::hamming_window(int64_t window_length, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, options);
}
Tensor TypeDefault::hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, options);
}
Tensor TypeDefault::hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, options);
}
Tensor TypeDefault::hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, beta, options);
}
Tensor TypeDefault::hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("hinge_embedding_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hinge_embedding_loss(self, target, margin, reduction);
}
Tensor TypeDefault::group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("group_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);
}
Tensor TypeDefault::fft(const Tensor & self, int64_t signal_ndim, bool normalized) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fft(self, signal_ndim, normalized);
}
Tensor TypeDefault::ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ifft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ifft(self, signal_ndim, normalized);
}
Tensor TypeDefault::rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("rfft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rfft(self, signal_ndim, normalized, onesided);
}
Tensor TypeDefault::irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("irfft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::irfft(self, signal_ndim, normalized, onesided, signal_sizes);
}
int64_t TypeDefault::_cufft_get_plan_cache_size(int64_t device_index) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_size(device_index);
}
int64_t TypeDefault::_cufft_get_plan_cache_max_size(int64_t device_index) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_max_size(device_index);
}
void TypeDefault::_cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
 at::native::_cufft_set_plan_cache_max_size(device_index, max_size);
}
void TypeDefault::_cufft_clear_plan_cache(int64_t device_index) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
 at::native::_cufft_clear_plan_cache(device_index);
}
Tensor TypeDefault::index(const Tensor & self, TensorList indices) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || at::has_names(indices)) {
        AT_ERROR("index: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index(self, indices);
}
Tensor & TypeDefault::index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_copy_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor TypeDefault::index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_copy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & TypeDefault::index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR("index_put_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put_(self, indices, values, accumulate);
}
Tensor TypeDefault::index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR("index_put: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put(self, indices, values, accumulate);
}
Tensor & TypeDefault::_index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR("_index_put_impl_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_index_put_impl_(self, indices, values, accumulate, unsafe);
}
Tensor TypeDefault::instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("instance_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
}
Tensor TypeDefault::inverse(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("inverse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse(self);
}
Tensor & TypeDefault::inverse_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("inverse_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse_out(out, self);
}
Tensor TypeDefault::isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("isclose: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::isclose(self, other, rtol, atol, equal_nan);
}
Tensor TypeDefault::isnan(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("isnan: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::isnan(self);
}
bool TypeDefault::is_distributed(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("is_distributed: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_distributed(self);
}
bool TypeDefault::is_floating_point(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::is_floating_point(self);
}
bool TypeDefault::is_complex(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::is_complex(self);
}
bool TypeDefault::is_nonzero(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::is_nonzero(self);
}
bool TypeDefault::is_same_size(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::is_same_size(self, other);
}
bool TypeDefault::is_signed(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::is_signed(self);
}
Tensor TypeDefault::kl_div(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("kl_div: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div(self, target, reduction);
}
std::tuple<Tensor,Tensor> TypeDefault::kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("kthvalue: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
Tensor TypeDefault::layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("layer_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);
}
Tensor TypeDefault::linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("linear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::linear(input, weight, bias);
}
Tensor TypeDefault::fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_int8_weight_fp32_activation: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
Tensor TypeDefault::fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_int8_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
std::tuple<Tensor,Tensor,double,int64_t> TypeDefault::fbgemm_linear_quantize_weight(const Tensor & input) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("fbgemm_linear_quantize_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_quantize_weight(input);
}
Tensor TypeDefault::fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("fbgemm_pack_gemm_matrix_fp16: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_gemm_matrix_fp16(input);
}
Tensor TypeDefault::fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_fp16_weight_fp32_activation: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);
}
Tensor TypeDefault::fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_fp16_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight(input, packed_weight, bias);
}
Tensor TypeDefault::fbgemm_pack_quantized_matrix(const Tensor & input) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("fbgemm_pack_quantized_matrix: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input);
}
Tensor TypeDefault::fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("fbgemm_pack_quantized_matrix: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input, K, N);
}
bool TypeDefault::fbgemm_is_cpu_supported() {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::fbgemm_is_cpu_supported();
}
Tensor TypeDefault::linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::linspace(start, end, steps, options);
}
Tensor TypeDefault::log(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log(self);
}
Tensor TypeDefault::log10(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10(self);
}
Tensor TypeDefault::log1p(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p(self);
}
Tensor TypeDefault::log2(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2(self);
}
Tensor TypeDefault::logdet(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("logdet: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logdet(self);
}
Tensor TypeDefault::logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::logspace(start, end, steps, base, options);
}
Tensor TypeDefault::log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
#endif
Tensor TypeDefault::logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("logsumexp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & TypeDefault::logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("logsumexp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor TypeDefault::margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (input1.has_names() || input2.has_names() || target.has_names()) {
        AT_ERROR("margin_ranking_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::margin_ranking_loss(input1, input2, target, margin, reduction);
}
Tensor TypeDefault::matmul(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("matmul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul(self, other);
}
Tensor & TypeDefault::matmul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("matmul_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul_out(out, self, other);
}
Tensor TypeDefault::matrix_rank(const Tensor & self, double tol, bool symmetric) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("matrix_rank: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, tol, symmetric);
}
Tensor TypeDefault::matrix_rank(const Tensor & self, bool symmetric) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("matrix_rank: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, symmetric);
}
Tensor TypeDefault::matrix_power(const Tensor & self, int64_t n) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("matrix_power: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_power(self, n);
}
std::tuple<Tensor,Tensor> TypeDefault::max(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> TypeDefault::max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (max.has_names() || max_values.has_names() || self.has_names()) {
        AT_ERROR("max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor TypeDefault::max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_values: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> TypeDefault::max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool1d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor TypeDefault::max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor TypeDefault::max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor TypeDefault::max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor TypeDefault::mean(const Tensor & self, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(self, dtype);
}
Tensor TypeDefault::mean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(self, dim, keepdim, dtype);
}
Tensor & TypeDefault::mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("mean_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(out, self, dim, keepdim, dtype);
}
std::tuple<Tensor,Tensor> TypeDefault::median(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("median: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> TypeDefault::median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("median_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> TypeDefault::min(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> TypeDefault::min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (min.has_names() || min_indices.has_names() || self.has_names()) {
        AT_ERROR("min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor TypeDefault::min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("min_values: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
Tensor TypeDefault::mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("mkldnn_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);
}
Tensor TypeDefault::mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("mkldnn_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor> TypeDefault::mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("mkldnn_convolution_backward_weights: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("mkldnn_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);
}
Tensor TypeDefault::_sparse_mm(const Tensor & sparse, const Tensor & dense) {
#ifdef BUILD_NAMEDTENSOR
    if (sparse.has_names() || dense.has_names()) {
        AT_ERROR("_sparse_mm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(sparse));
    return at::native::_sparse_mm(sparse, dense);
}
std::tuple<Tensor,Tensor> TypeDefault::mode(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mode: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> TypeDefault::mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("mode_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
Tensor TypeDefault::mul(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & TypeDefault::mul_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mul_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor TypeDefault::mvlgamma(const Tensor & self, int64_t p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mvlgamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma(self, p);
}
Tensor & TypeDefault::mvlgamma_(Tensor & self, int64_t p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("mvlgamma_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma_(self, p);
}
Tensor TypeDefault::narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::narrow(self, dim, start, length);
}
bool TypeDefault::_nnpack_available() {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::_nnpack_available();
}
Tensor TypeDefault::_nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution(input, weight, bias, padding);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::_nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);
}
Tensor TypeDefault::_nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);
}
Tensor TypeDefault::_nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grad_output.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::ones(size, names, options);
}
#endif
Tensor TypeDefault::ones(IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::ones(size, options);
}
Tensor & TypeDefault::ones_out(Tensor & out, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("ones_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::ones_out(out, size);
}
Tensor TypeDefault::ones_like(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ones_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ones_like(self);
}
Tensor TypeDefault::ones_like(const Tensor & self, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ones_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::ones_like(self, options);
}
Tensor TypeDefault::pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR("pairwise_distance: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::pairwise_distance(x1, x2, p, eps, keepdim);
}
Tensor TypeDefault::cdist(const Tensor & x1, const Tensor & x2, double p) {
#ifdef BUILD_NAMEDTENSOR
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR("cdist: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cdist(x1, x2, p);
}
Tensor TypeDefault::_cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || x1.has_names() || x2.has_names() || cdist.has_names()) {
        AT_ERROR("_cdist_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_cdist_backward(grad, x1, x2, p, cdist);
}
Tensor TypeDefault::pdist(const Tensor & self, double p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pdist: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pdist(self, p);
}
Tensor TypeDefault::_pdist_forward(const Tensor & self, double p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_pdist_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_forward(self, p);
}
Tensor TypeDefault::_pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || self.has_names() || pdist.has_names()) {
        AT_ERROR("_pdist_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_backward(grad, self, p, pdist);
}
Tensor TypeDefault::cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {
#ifdef BUILD_NAMEDTENSOR
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR("cosine_similarity: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cosine_similarity(x1, x2, dim, eps);
}
Tensor TypeDefault::permute(const Tensor & self, IntArrayRef dims) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("permute: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::permute(self, dims);
}
Tensor TypeDefault::numpy_T(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("numpy_T: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::numpy_T(self);
}
Tensor TypeDefault::pixel_shuffle(const Tensor & self, int64_t upscale_factor) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pixel_shuffle: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pixel_shuffle(self, upscale_factor);
}
bool TypeDefault::is_pinned(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_pinned(self);
}
Tensor TypeDefault::pin_memory(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pin_memory: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pin_memory(self);
}
Tensor TypeDefault::pinverse(const Tensor & self, double rcond) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pinverse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pinverse(self, rcond);
}
Tensor TypeDefault::poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || target.has_names()) {
        AT_ERROR("poisson_nll_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::poisson_nll_loss(input, target, log_input, full, eps, reduction);
}
Tensor TypeDefault::scalar_tensor(Scalar s, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::scalar_tensor(s, options);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::rand(size, names, options);
}
#endif
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::rand(size, generator, names, options);
}
#endif
Tensor TypeDefault::rand(IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, options);
}
Tensor TypeDefault::rand(IntArrayRef size, Generator * generator, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, generator, options);
}
Tensor & TypeDefault::rand_out(Tensor & out, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("rand_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size);
}
Tensor & TypeDefault::rand_out(Tensor & out, IntArrayRef size, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("rand_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size, generator);
}
Tensor TypeDefault::rand_like(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("rand_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rand_like(self);
}
Tensor TypeDefault::rand_like(const Tensor & self, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("rand_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::rand_like(self, options);
}
Tensor TypeDefault::randint(int64_t high, IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, options);
}
Tensor TypeDefault::randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, generator, options);
}
Tensor TypeDefault::randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, options);
}
Tensor TypeDefault::randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, generator, options);
}
Tensor & TypeDefault::randint_out(Tensor & out, int64_t high, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size);
}
Tensor & TypeDefault::randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size, generator);
}
Tensor & TypeDefault::randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size);
}
Tensor & TypeDefault::randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size, generator);
}
Tensor TypeDefault::randint_like(const Tensor & self, int64_t high) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randint_like(self, high);
}
Tensor TypeDefault::randint_like(const Tensor & self, int64_t low, int64_t high) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randint_like(self, low, high);
}
Tensor TypeDefault::randint_like(const Tensor & self, int64_t high, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, high, options);
}
Tensor TypeDefault::randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, low, high, options);
}
Tensor TypeDefault::randn(IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, options);
}
Tensor TypeDefault::randn(IntArrayRef size, Generator * generator, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, generator, options);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::randn(size, names, options);
}
#endif
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::randn(size, generator, names, options);
}
#endif
Tensor & TypeDefault::randn_out(Tensor & out, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randn_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size);
}
Tensor & TypeDefault::randn_out(Tensor & out, IntArrayRef size, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randn_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size, generator);
}
Tensor TypeDefault::randn_like(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("randn_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randn_like(self);
}
Tensor TypeDefault::randn_like(const Tensor & self, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("randn_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randn_like(self, options);
}
Tensor TypeDefault::randperm(int64_t n, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, options);
}
Tensor TypeDefault::randperm(int64_t n, Generator * generator, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, generator, options);
}
Tensor & TypeDefault::randperm_out(Tensor & out, int64_t n) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randperm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out(out, n);
}
Tensor TypeDefault::range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, step, options);
}
Tensor TypeDefault::range(Scalar start, Scalar end, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, options);
}
Tensor TypeDefault::reciprocal(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal(self);
}
Tensor TypeDefault::neg(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg(self);
}
Tensor & TypeDefault::neg_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_(self);
}
Tensor TypeDefault::repeat(const Tensor & self, IntArrayRef repeats) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("repeat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat(self, repeats);
}
Tensor TypeDefault::repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || repeats.has_names()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor TypeDefault::repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor TypeDefault::reshape(const Tensor & self, IntArrayRef shape) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::reshape(self, shape);
}
Tensor TypeDefault::reshape_as(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("reshape_as: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::reshape_as(self, other);
}
Tensor TypeDefault::round(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round(self);
}
Tensor TypeDefault::rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("rrelu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu(self, lower, upper, training, generator);
}
Tensor & TypeDefault::rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("rrelu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_(self, lower, upper, training, generator);
}
Tensor TypeDefault::rsqrt(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt(self);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::select(const Tensor & self, Dimname dim, int64_t index) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
#endif
Tensor TypeDefault::select(const Tensor & self, int64_t dim, int64_t index) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor TypeDefault::selu(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("selu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu(self);
}
Tensor & TypeDefault::selu_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("selu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu_(self);
}
Tensor TypeDefault::celu(const Tensor & self, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("celu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu(self, alpha);
}
Tensor & TypeDefault::celu_(Tensor & self, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("celu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu_(self, alpha);
}
Tensor TypeDefault::sin(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin(self);
}
Tensor TypeDefault::sinh(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh(self);
}
Tensor TypeDefault::detach(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("detach: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach(self);
}
Tensor & TypeDefault::detach_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("detach_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach_(self);
}
int64_t TypeDefault::size(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::size(self, dim);
}
#ifdef BUILD_NAMEDTENSOR
int64_t TypeDefault::size(const Tensor & self, Dimname dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::size(self, dim);
}
#endif
Tensor TypeDefault::slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::slice(self, dim, start, end, step);
}
std::tuple<Tensor,Tensor> TypeDefault::slogdet(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("slogdet: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slogdet(self);
}
Tensor TypeDefault::smm(const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("smm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smm(self, mat2);
}
Tensor TypeDefault::softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
#endif
std::vector<Tensor> TypeDefault::split(const Tensor & self, int64_t split_size, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::split(self, split_size, dim);
}
std::vector<Tensor> TypeDefault::split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::split_with_sizes(self, split_sizes, dim);
}
Tensor TypeDefault::squeeze(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("squeeze: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze(self);
}
Tensor TypeDefault::squeeze(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("squeeze: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor & TypeDefault::squeeze_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("squeeze_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze_(self);
}
Tensor & TypeDefault::squeeze_(Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("squeeze_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor TypeDefault::sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("sspaddmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sspaddmm(self, mat1, mat2, beta, alpha);
}
Tensor TypeDefault::stack(TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("stack: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::stack(tensors, dim);
}
Tensor & TypeDefault::stack_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR("stack_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::stack_out(out, tensors, dim);
}
Tensor TypeDefault::stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || window.has_names()) {
        AT_ERROR("stft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);
}
int64_t TypeDefault::stride(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
#ifdef BUILD_NAMEDTENSOR
int64_t TypeDefault::stride(const Tensor & self, Dimname dim) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
#endif
Tensor TypeDefault::sum(const Tensor & self, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dtype);
}
Tensor TypeDefault::sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::sum(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
#endif
Tensor & TypeDefault::sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
#ifdef BUILD_NAMEDTENSOR
Tensor & TypeDefault::sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
#endif
Tensor TypeDefault::sum_to_size(const Tensor & self, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("sum_to_size: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::sum_to_size(self, size);
}
Tensor TypeDefault::sqrt(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt(self);
}
Tensor TypeDefault::std(const Tensor & self, bool unbiased) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("std: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, unbiased);
}
Tensor TypeDefault::std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("std: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> TypeDefault::std_mean(const Tensor & self, bool unbiased) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("std_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> TypeDefault::std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("std_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
Tensor & TypeDefault::std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("std_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor TypeDefault::prod(const Tensor & self, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dtype);
}
Tensor TypeDefault::prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & TypeDefault::prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::prod(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
#endif
#ifdef BUILD_NAMEDTENSOR
Tensor & TypeDefault::prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
#endif
Tensor TypeDefault::t(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("t: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::t(self);
}
Tensor & TypeDefault::t_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("t_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::t_(self);
}
Tensor TypeDefault::tan(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan(self);
}
Tensor TypeDefault::tanh(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tanh(self);
}
Tensor TypeDefault::tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("tensordot: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tensordot(self, other, dims_self, dims_other);
}
Tensor TypeDefault::threshold(const Tensor & self, Scalar threshold, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("threshold: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold(self, threshold, value);
}
Tensor & TypeDefault::threshold_(Tensor & self, Scalar threshold, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("threshold_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_(self, threshold, value);
}
Tensor & TypeDefault::threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("threshold_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_out(out, self, threshold, value);
}
Tensor TypeDefault::threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("threshold_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_backward(grad_output, self, threshold);
}
Tensor TypeDefault::transpose(const Tensor & self, int64_t dim0, int64_t dim1) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("transpose: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor & TypeDefault::transpose_(Tensor & self, int64_t dim0, int64_t dim1) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("transpose_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::transpose_(self, dim0, dim1);
}
Tensor TypeDefault::one_hot(const Tensor & self, int64_t num_classes) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("one_hot: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::one_hot(self, num_classes);
}
Tensor TypeDefault::rot90(const Tensor & self, int64_t k, IntArrayRef dims) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("rot90: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rot90(self, k, dims);
}
Tensor TypeDefault::trapz(const Tensor & y, const Tensor & x, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (y.has_names() || x.has_names()) {
        AT_ERROR("trapz: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, x, dim);
}
Tensor TypeDefault::trapz(const Tensor & y, double dx, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (y.has_names()) {
        AT_ERROR("trapz: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, dx, dim);
}
Tensor TypeDefault::_trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {
#ifdef BUILD_NAMEDTENSOR
    if (i1.has_names() || i2.has_names() || i3.has_names()) {
        AT_ERROR("_trilinear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(i1));
    return at::native::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
}
Tensor TypeDefault::triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (anchor.has_names() || positive.has_names() || negative.has_names()) {
        AT_ERROR("triplet_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(anchor));
    return at::native::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);
}
Tensor TypeDefault::trunc(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc(self);
}
Tensor TypeDefault::type_as(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("type_as: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::type_as(self, other);
}
bool TypeDefault::_has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || from.has_names()) {
        AT_ERROR("_has_compatible_shallow_copy_type: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_has_compatible_shallow_copy_type(self, from);
}
Tensor TypeDefault::_unsafe_view(const Tensor & self, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_unsafe_view: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unsafe_view(self, size);
}
Tensor TypeDefault::unsqueeze(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unsqueeze: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::unsqueeze(self, dim);
}
Tensor & TypeDefault::unsqueeze_(Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unsqueeze_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::unsqueeze_(self, dim);
}
Tensor TypeDefault::var(const Tensor & self, bool unbiased) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("var: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, unbiased);
}
Tensor TypeDefault::var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("var: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & TypeDefault::var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("var_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> TypeDefault::var_mean(const Tensor & self, bool unbiased) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("var_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> TypeDefault::var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("var_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
Tensor TypeDefault::view_as(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("view_as: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::view_as(self, other);
}
Tensor TypeDefault::where(const Tensor & condition, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("where: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::where(condition, self, other);
}
std::vector<Tensor> TypeDefault::where(const Tensor & condition) {
#ifdef BUILD_NAMEDTENSOR
    if (condition.has_names()) {
        AT_ERROR("where: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(condition));
    return at::native::where(condition);
}
Tensor TypeDefault::norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (v.has_names()) {
        AT_ERROR("norm_except_dim: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::norm_except_dim(v, pow, dim);
}
Tensor TypeDefault::_weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (v.has_names() || g.has_names()) {
        AT_ERROR("_weight_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::_weight_norm(v, g, dim);
}
std::tuple<Tensor,Tensor> TypeDefault::_weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_w.has_names() || saved_v.has_names() || saved_g.has_names() || saved_norms.has_names()) {
        AT_ERROR("_weight_norm_differentiable_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);
}
#ifdef BUILD_NAMEDTENSOR
Tensor TypeDefault::zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::zeros(size, names, options);
}
#endif
Tensor TypeDefault::zeros(IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::zeros(size, options);
}
Tensor & TypeDefault::zeros_out(Tensor & out, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("zeros_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::zeros_out(out, size);
}
Tensor TypeDefault::zeros_like(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("zeros_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::zeros_like(self);
}
Tensor TypeDefault::zeros_like(const Tensor & self, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("zeros_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::zeros_like(self, options);
}
Tensor TypeDefault::_sparse_sum(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self);
}
Tensor TypeDefault::_sparse_sum(const Tensor & self, ScalarType dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dtype);
}
Tensor TypeDefault::_sparse_sum(const Tensor & self, IntArrayRef dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim);
}
Tensor TypeDefault::_sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim, dtype);
}
Tensor TypeDefault::norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dtype);
}
Tensor TypeDefault::norm(const Tensor & self, Scalar p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p);
}
Tensor TypeDefault::norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor TypeDefault::norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & TypeDefault::norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & TypeDefault::norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor TypeDefault::frobenius_norm(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("frobenius_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self);
}
Tensor TypeDefault::frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("frobenius_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self, dim, keepdim);
}
Tensor & TypeDefault::frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("frobenius_norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm_out(out, self, dim, keepdim);
}
Tensor TypeDefault::nuclear_norm(const Tensor & self, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("nuclear_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, keepdim);
}
Tensor & TypeDefault::nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nuclear_norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, keepdim);
}
Tensor TypeDefault::nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("nuclear_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, dim, keepdim);
}
Tensor & TypeDefault::nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nuclear_norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, dim, keepdim);
}
Tensor & TypeDefault::sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_out(out, self, other, alpha);
}
Tensor TypeDefault::sub(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(self, other, alpha);
}
Tensor & TypeDefault::sub_(Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(self, other, alpha);
}
Tensor TypeDefault::sub(const Tensor & self, Scalar other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(self, other, alpha);
}
Tensor & TypeDefault::sub_(Tensor & self, Scalar other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(self, other, alpha);
}
Tensor TypeDefault::rsub(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor TypeDefault::rsub(const Tensor & self, Scalar other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor TypeDefault::_sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || sparse.has_names() || dense.has_names()) {
        AT_ERROR("_sparse_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_addmm(self, sparse, dense, beta, alpha);
}
Tensor & TypeDefault::addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm_out(out, self, mat1, mat2, beta, alpha);
}
Tensor TypeDefault::addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm(self, mat1, mat2, beta, alpha);
}
Tensor & TypeDefault::addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm_(self, mat1, mat2, beta, alpha);
}
Tensor TypeDefault::sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(size, options);
}
Tensor TypeDefault::sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("sparse_coo_tensor: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, options);
}
Tensor TypeDefault::sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("sparse_coo_tensor: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, size, options);
}
Tensor TypeDefault::_sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("_sparse_coo_tensor_unsafe: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::_sparse_coo_tensor_unsafe(indices, values, size, options);
}
Tensor TypeDefault::to_dense_backward(const Tensor & grad, const Tensor & input) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || input.has_names()) {
        AT_ERROR("to_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_dense_backward(grad, input);
}
int64_t TypeDefault::numel(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::numel(self);
}
std::vector<Tensor> TypeDefault::unbind(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unbind: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
Tensor TypeDefault::to_mkldnn_backward(const Tensor & grad, const Tensor & input) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || input.has_names()) {
        AT_ERROR("to_mkldnn_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_mkldnn_backward(grad, input);
}
Tensor TypeDefault::to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::to(self, options, non_blocking, copy);
}
Tensor TypeDefault::to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::to(self, device, dtype, non_blocking, copy);
}
Tensor TypeDefault::to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::to(self, dtype, non_blocking, copy);
}
Tensor TypeDefault::to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::to(self, other, non_blocking, copy);
}
std::vector<Tensor> TypeDefault::meshgrid(TensorList tensors) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("meshgrid: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::meshgrid(tensors);
}
Tensor TypeDefault::cartesian_prod(TensorList tensors) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("cartesian_prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cartesian_prod(tensors);
}
Tensor TypeDefault::combinations(const Tensor & self, int64_t r, bool with_replacement) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("combinations: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::combinations(self, r, with_replacement);
}
Scalar TypeDefault::item(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::item(self);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("lstm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef BUILD_NAMEDTENSOR
    if (data.has_names() || batch_sizes.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("lstm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> TypeDefault::gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("gru: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> TypeDefault::gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef BUILD_NAMEDTENSOR
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("gru: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> TypeDefault::rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_tanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> TypeDefault::rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef BUILD_NAMEDTENSOR
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_tanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_tanh(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> TypeDefault::rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> TypeDefault::rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef BUILD_NAMEDTENSOR
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_relu(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> TypeDefault::lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || at::has_names(hx)) {
        AT_ERROR("lstm_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor TypeDefault::gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR("gru_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor TypeDefault::rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR("rnn_tanh_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor TypeDefault::rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR("rnn_relu_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("quantized_lstm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype);
}
std::tuple<Tensor,Tensor> TypeDefault::quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("quantized_gru: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> TypeDefault::quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef BUILD_NAMEDTENSOR
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("quantized_gru: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::quantized_gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> TypeDefault::quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names() || at::has_names(hx)) {
        AT_ERROR("quantized_lstm_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor TypeDefault::quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR("quantized_gru_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor TypeDefault::quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR("quantized_rnn_relu_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor TypeDefault::quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR("quantized_rnn_tanh_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
std::tuple<Tensor,Tensor> TypeDefault::_pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || lengths.has_names()) {
        AT_ERROR("_pack_padded_sequence: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_pack_padded_sequence(input, lengths, batch_first);
}
Tensor TypeDefault::_pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || batch_sizes.has_names()) {
        AT_ERROR("_pack_padded_sequence_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);
}
std::tuple<Tensor,Tensor> TypeDefault::_pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {
#ifdef BUILD_NAMEDTENSOR
    if (data.has_names() || batch_sizes.has_names()) {
        AT_ERROR("_pad_packed_sequence: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);
}
Tensor TypeDefault::masked_fill(const Tensor & self, const Tensor & mask, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("masked_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor TypeDefault::masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names() || value.has_names()) {
        AT_ERROR("masked_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor TypeDefault::masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names() || source.has_names()) {
        AT_ERROR("masked_scatter: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter(self, mask, source);
}
Tensor TypeDefault::index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_add: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor TypeDefault::index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor TypeDefault::index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || value.has_names()) {
        AT_ERROR("index_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor TypeDefault::scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor TypeDefault::scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("scatter: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor TypeDefault::scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_add: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor & TypeDefault::atan2_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("atan2_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_(self, other);
}
Tensor & TypeDefault::addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {
        AT_ERROR("addcdiv_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_(self, tensor1, tensor2, value);
}
Tensor & TypeDefault::cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("cross_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross_out(out, self, other, dim);
}
Tensor TypeDefault::cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("cross: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross(self, other, dim);
}
Tensor TypeDefault::triu(const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("triu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu(self, diagonal);
}
Tensor TypeDefault::tril(const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("tril: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril(self, diagonal);
}
std::vector<Tensor> TypeDefault::nonzero_numpy(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("nonzero_numpy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nonzero_numpy(self);
}
Tensor TypeDefault::_gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || grad.has_names()) {
        AT_ERROR("_gather_sparse_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_gather_sparse_backward(self, dim, index, grad);
}
Tensor & TypeDefault::addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || tensor1.has_names() || tensor2.has_names()) {
        AT_ERROR("addcmul_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_out(out, self, tensor1, tensor2, value);
}
Tensor TypeDefault::addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {
        AT_ERROR("addcmul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul(self, tensor1, tensor2, value);
}
Tensor & TypeDefault::addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {
        AT_ERROR("addcmul_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_(self, tensor1, tensor2, value);
}
Tensor & TypeDefault::addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || tensor1.has_names() || tensor2.has_names()) {
        AT_ERROR("addcdiv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_out(out, self, tensor1, tensor2, value);
}
Tensor TypeDefault::addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {
        AT_ERROR("addcdiv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv(self, tensor1, tensor2, value);
}
std::tuple<Tensor &,Tensor &> TypeDefault::triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
#ifdef BUILD_NAMEDTENSOR
    if (X.has_names() || M.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR("triangular_solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve_out(X, M, self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> TypeDefault::triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || A.has_names()) {
        AT_ERROR("triangular_solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor &,Tensor &> TypeDefault::symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (e.has_names() || V.has_names() || self.has_names()) {
        AT_ERROR("symeig_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig_out(e, V, self, eigenvectors, upper);
}
std::tuple<Tensor,Tensor> TypeDefault::symeig(const Tensor & self, bool eigenvectors, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("symeig: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &,Tensor &> TypeDefault::svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {
#ifdef BUILD_NAMEDTENSOR
    if (U.has_names() || S.has_names() || V.has_names() || self.has_names()) {
        AT_ERROR("svd_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd_out(U, S, V, self, some, compute_uv);
}
std::tuple<Tensor,Tensor,Tensor> TypeDefault::svd(const Tensor & self, bool some, bool compute_uv) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("svd: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd(self, some, compute_uv);
}
Tensor & TypeDefault::cholesky_out(Tensor & out, const Tensor & self, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("cholesky_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_out(out, self, upper);
}
Tensor TypeDefault::cholesky(const Tensor & self, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("cholesky: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky(self, upper);
}
Tensor & TypeDefault::cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || input2.has_names()) {
        AT_ERROR("cholesky_solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve_out(out, self, input2, upper);
}
Tensor TypeDefault::cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || input2.has_names()) {
        AT_ERROR("cholesky_solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve(self, input2, upper);
}
std::tuple<Tensor,Tensor> TypeDefault::solve(const Tensor & self, const Tensor & A) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || A.has_names()) {
        AT_ERROR("solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve(self, A);
}
std::tuple<Tensor &,Tensor &> TypeDefault::solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {
#ifdef BUILD_NAMEDTENSOR
    if (solution.has_names() || lu.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR("solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve_out(solution, lu, self, A);
}
std::tuple<Tensor &,Tensor &> TypeDefault::qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) {
#ifdef BUILD_NAMEDTENSOR
    if (Q.has_names() || R.has_names() || self.has_names()) {
        AT_ERROR("qr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr_out(Q, R, self, some);
}
std::tuple<Tensor,Tensor> TypeDefault::qr(const Tensor & self, bool some) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("qr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr(self, some);
}
Tensor & TypeDefault::lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR("lu_solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve_out(out, self, LU_data, LU_pivots);
}
Tensor TypeDefault::lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR("lu_solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve(self, LU_data, LU_pivots);
}
Tensor & TypeDefault::atan2_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("atan2_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_out(out, self, other);
}
Tensor TypeDefault::atan2(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("atan2: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2(self, other);
}
Tensor TypeDefault::argsort(const Tensor & self, int64_t dim, bool descending) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("argsort: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
std::tuple<Tensor,Tensor> TypeDefault::topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("topk: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::topk(self, k, dim, largest, sorted);
}
Tensor TypeDefault::all(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("all: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self);
}
Tensor TypeDefault::any(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("any: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self);
}
Tensor TypeDefault::normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::normal(mean, std, size, generator, options);
}
Tensor & TypeDefault::normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, size, generator);
}
Tensor TypeDefault::alias(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alias(self);
}
Tensor & TypeDefault::multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_out(out, self, target, reduction);
}
Tensor TypeDefault::multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss(self, target, reduction);
}
Tensor & TypeDefault::nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_out(out, self, target, weight, reduction, ignore_index);
}
Tensor TypeDefault::nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss(self, target, weight, reduction, ignore_index);
}
Tensor & TypeDefault::nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_out(out, self, target, weight, reduction, ignore_index);
}
Tensor TypeDefault::nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d(self, target, weight, reduction, ignore_index);
}
Tensor & TypeDefault::log_sigmoid_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("log_sigmoid_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_out(out, self);
}
Tensor TypeDefault::log_sigmoid(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("log_sigmoid: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid(self);
}
Tensor TypeDefault::adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("adaptive_avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d(self, output_size);
}
Tensor & TypeDefault::thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor TypeDefault::thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);
}
Tensor & TypeDefault::thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d_out(out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor TypeDefault::thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor & TypeDefault::thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv3d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor TypeDefault::thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv3d(self, weight, kernel_size, bias, stride, padding);
}

static auto& registerer = globalATenDispatch()
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Byte)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Char)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Double)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Float)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Int)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Long)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Short)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor", &TypeDefault::_cast_Half)
  .registerOp<void (const Tensor &, const Tensor &, bool, bool)>(Backend::Undefined, "aten::backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> void", &TypeDefault::backward)
  .registerOp<void (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::set_data(Tensor(a!) self, Tensor new_data) -> void", &TypeDefault::set_data)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor & (Tensor &, c10::optional<DimnameList>)>(Backend::Undefined, "aten::names_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)", &TypeDefault::names_)
  #endif
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, c10::optional<DimnameList>)>(Backend::Undefined, "aten::view_names(Tensor(a) self, Dimname[]? names) -> Tensor(a)", &TypeDefault::view_names)
  #endif
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, DimnameList)>(Backend::Undefined, "aten::align_to(Tensor self, DimnameList names) -> Tensor", &TypeDefault::align_to)
  #endif
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<std::vector<Tensor> (TensorList)>(Backend::Undefined, "aten::align_tensors(Tensor[] tensors) -> Tensor[]", &TypeDefault::align_tensors)
  #endif
  .registerOp<int64_t (const Tensor &)>(Backend::Undefined, "aten::_debug_has_internal_overlap(Tensor self) -> int", &TypeDefault::_debug_has_internal_overlap)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)", &TypeDefault::_sobol_engine_draw)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)", &TypeDefault::_sobol_engine_ff_)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)", &TypeDefault::_sobol_engine_scramble_)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::Undefined, "aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)", &TypeDefault::_sobol_engine_initialize_state_)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor", &TypeDefault::_reshape_from_tensor)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::_shape_as_tensor(Tensor self) -> Tensor", &TypeDefault::_shape_as_tensor)
  .registerOp<Tensor (const Tensor &, double, bool)>(Backend::Undefined, "aten::dropout(Tensor input, float p, bool train) -> Tensor", &TypeDefault::dropout)
  .registerOp<Tensor & (Tensor &, double, bool)>(Backend::Undefined, "aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)", &TypeDefault::dropout_)
  .registerOp<Tensor (const Tensor &, double, bool)>(Backend::Undefined, "aten::feature_dropout(Tensor input, float p, bool train) -> Tensor", &TypeDefault::feature_dropout)
  .registerOp<Tensor & (Tensor &, double, bool)>(Backend::Undefined, "aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)", &TypeDefault::feature_dropout_)
  .registerOp<Tensor (const Tensor &, double, bool)>(Backend::Undefined, "aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor", &TypeDefault::alpha_dropout)
  .registerOp<Tensor & (Tensor &, double, bool)>(Backend::Undefined, "aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)", &TypeDefault::alpha_dropout_)
  .registerOp<Tensor (const Tensor &, double, bool)>(Backend::Undefined, "aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor", &TypeDefault::feature_alpha_dropout)
  .registerOp<Tensor & (Tensor &, double, bool)>(Backend::Undefined, "aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)", &TypeDefault::feature_alpha_dropout_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::abs(Tensor self) -> Tensor", &TypeDefault::abs)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::acos(Tensor self) -> Tensor", &TypeDefault::acos)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor", &TypeDefault::avg_pool1d)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor", &TypeDefault::adaptive_avg_pool1d)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)", &TypeDefault::adaptive_max_pool1d)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor", &TypeDefault::add)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)", &TypeDefault::add_)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &TypeDefault::addr)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &TypeDefault::addr_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::addr_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::affine_grid_generator(Tensor theta, int[] size) -> Tensor", &TypeDefault::affine_grid_generator)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::affine_grid_generator_backward(Tensor grad, int[] size) -> Tensor", &TypeDefault::affine_grid_generator_backward)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor", &TypeDefault::all)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::all_out)
  .registerOp<bool (const Tensor &, const Tensor &, double, double, bool)>(Backend::Undefined, "aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool", &TypeDefault::allclose)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor", &TypeDefault::any)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::any_out)
  .registerOp<Tensor (Scalar, const TensorOptions &)>(Backend::Undefined, "aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::arange)
  .registerOp<Tensor (Scalar, Scalar, const TensorOptions &)>(Backend::Undefined, "aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::arange)
  .registerOp<Tensor (Scalar, Scalar, Scalar, const TensorOptions &)>(Backend::Undefined, "aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::arange)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::Undefined, "aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::arange_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::_dim_arange(Tensor like, int dim) -> Tensor", &TypeDefault::_dim_arange)
  .registerOp<Tensor (const Tensor &, c10::optional<int64_t>, bool)>(Backend::Undefined, "aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor", &TypeDefault::argmax)
  .registerOp<Tensor (const Tensor &, c10::optional<int64_t>, bool)>(Backend::Undefined, "aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor", &TypeDefault::argmin)
  .registerOp<Tensor & (Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>(Backend::Undefined, "aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)", &TypeDefault::as_strided_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::asin(Tensor self) -> Tensor", &TypeDefault::asin)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::atan(Tensor self) -> Tensor", &TypeDefault::atan)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &TypeDefault::_baddbmm_mkl_)
  .registerOp<Tensor (int64_t, const TensorOptions &)>(Backend::Undefined, "aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::bartlett_window)
  .registerOp<Tensor (int64_t, bool, const TensorOptions &)>(Backend::Undefined, "aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::bartlett_window)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool)>(Backend::Undefined, "aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor", &TypeDefault::batch_norm)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,int64_t> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool)>(Backend::Undefined, "aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, int)", &TypeDefault::_batch_norm_impl_index)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>)>(Backend::Undefined, "aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &TypeDefault::_batch_norm_impl_index_backward)
  .registerOp<Tensor (const Tensor &, Generator *)>(Backend::Undefined, "aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor", &TypeDefault::bernoulli)
  .registerOp<Tensor & (Tensor &, const Tensor &, Generator *)>(Backend::Undefined, "aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::bernoulli_out)
  .registerOp<Tensor (const Tensor &, double, Generator *)>(Backend::Undefined, "aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor", &TypeDefault::bernoulli)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor", &TypeDefault::bilinear)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor", &TypeDefault::binary_cross_entropy_with_logits)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor", &TypeDefault::binary_cross_entropy_with_logits_backward)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::bitwise_not(Tensor self) -> Tensor", &TypeDefault::bitwise_not)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::bitwise_not_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::bitwise_not_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::logical_not(Tensor self) -> Tensor", &TypeDefault::logical_not)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::logical_not_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::logical_not_)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::logical_xor(Tensor self, Tensor other) -> Tensor", &TypeDefault::logical_xor)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::Undefined, "aten::logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)", &TypeDefault::logical_xor_)
  .registerOp<Tensor (int64_t, const TensorOptions &)>(Backend::Undefined, "aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::blackman_window)
  .registerOp<Tensor (int64_t, bool, const TensorOptions &)>(Backend::Undefined, "aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::blackman_window)
  .registerOp<std::vector<Tensor> (TensorList)>(Backend::Undefined, "aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]", &TypeDefault::broadcast_tensors)
  .registerOp<Tensor (TensorList, int64_t)>(Backend::Undefined, "aten::cat(Tensor[] tensors, int dim=0) -> Tensor", &TypeDefault::cat)
  .registerOp<Tensor & (Tensor &, TensorList, int64_t)>(Backend::Undefined, "aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::cat_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::ceil(Tensor self) -> Tensor", &TypeDefault::ceil)
  .registerOp<Tensor (TensorList)>(Backend::Undefined, "aten::chain_matmul(Tensor[] matrices) -> Tensor", &TypeDefault::chain_matmul)
  .registerOp<std::vector<Tensor> (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]", &TypeDefault::chunk)
  .registerOp<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>(Backend::Undefined, "aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor", &TypeDefault::clamp)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::clamp_max(Tensor self, Scalar max) -> Tensor", &TypeDefault::clamp_max)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::clamp_min(Tensor self, Scalar min) -> Tensor", &TypeDefault::clamp_min)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::cudnn_is_acceptable(Tensor self) -> bool", &TypeDefault::cudnn_is_acceptable)
  .registerOp<Tensor (const Tensor &, IntArrayRef, Scalar)>(Backend::Undefined, "aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor", &TypeDefault::constant_pad_nd)
  .registerOp<Tensor (const Tensor &, MemoryFormat)>(Backend::Undefined, "aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor", &TypeDefault::contiguous)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>(Backend::Undefined, "aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor", &TypeDefault::convolution)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool)>(Backend::Undefined, "aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor", &TypeDefault::_convolution)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef)>(Backend::Undefined, "aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor", &TypeDefault::_convolution_nogroup)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,3>)>(Backend::Undefined, "aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &TypeDefault::_convolution_double_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>(Backend::Undefined, "aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor", &TypeDefault::conv1d)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>(Backend::Undefined, "aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor", &TypeDefault::conv2d)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>(Backend::Undefined, "aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor", &TypeDefault::conv3d)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor", &TypeDefault::conv_tbc)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)", &TypeDefault::conv_tbc_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>(Backend::Undefined, "aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor", &TypeDefault::conv_transpose1d)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>(Backend::Undefined, "aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor", &TypeDefault::conv_transpose2d)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>(Backend::Undefined, "aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor", &TypeDefault::conv_transpose3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)", &TypeDefault::copy_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::cos(Tensor self) -> Tensor", &TypeDefault::cos)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::cosh(Tensor self) -> Tensor", &TypeDefault::cosh)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>(Backend::Undefined, "aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor", &TypeDefault::cosine_embedding_loss)
  .registerOp<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::cumsum)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::cumsum_out)
  .registerOp<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::cumprod)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::cumprod_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool)>(Backend::Undefined, "aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor", &TypeDefault::ctc_loss)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool)>(Backend::Undefined, "aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor", &TypeDefault::ctc_loss)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::det(Tensor self) -> Tensor", &TypeDefault::det)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::Undefined, "aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor", &TypeDefault::diag_embed)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::diagflat(Tensor self, int offset=0) -> Tensor", &TypeDefault::diagflat)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::Undefined, "aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)", &TypeDefault::diagonal)
  .registerOp<Tensor & (Tensor &, Scalar, bool)>(Backend::Undefined, "aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)", &TypeDefault::fill_diagonal_)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::div.Tensor(Tensor self, Tensor other) -> Tensor", &TypeDefault::div)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::Undefined, "aten::div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &TypeDefault::div_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::div_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::div.Scalar(Tensor self, Scalar other) -> Tensor", &TypeDefault::div)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::Undefined, "aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &TypeDefault::div_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::dot_out)
  .registerOp<Tensor (std::string, TensorList)>(Backend::Undefined, "aten::einsum(str equation, Tensor[] tensors) -> Tensor", &TypeDefault::einsum)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, bool, bool)>(Backend::Undefined, "aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor", &TypeDefault::embedding)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>(Backend::Undefined, "aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor", &TypeDefault::embedding_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(Backend::Undefined, "aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor", &TypeDefault::embedding_sparse_backward)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &)>(Backend::Undefined, "aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)", &TypeDefault::embedding_bag)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const Tensor &)>(Backend::Undefined, "aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor", &TypeDefault::_embedding_bag_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &)>(Backend::Undefined, "aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor", &TypeDefault::_embedding_bag_sparse_backward)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &, c10::optional<MemoryFormat>)>(Backend::Undefined, "aten::empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor", &TypeDefault::empty)
  #endif
  .registerOp<Tensor & (Tensor &, IntArrayRef, c10::optional<MemoryFormat>)>(Backend::Undefined, "aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::empty_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::empty_like(Tensor self) -> Tensor", &TypeDefault::empty_like)
  .registerOp<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>)>(Backend::Undefined, "aten::empty_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=contiguous_format) -> Tensor", &TypeDefault::empty_like)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::erf(Tensor self) -> Tensor", &TypeDefault::erf)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::erfc(Tensor self) -> Tensor", &TypeDefault::erfc)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::exp(Tensor self) -> Tensor", &TypeDefault::exp)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::expm1(Tensor self) -> Tensor", &TypeDefault::expm1)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)", &TypeDefault::expand)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::expand_as(Tensor self, Tensor other) -> Tensor", &TypeDefault::expand_as)
  .registerOp<Tensor (int64_t, const TensorOptions &)>(Backend::Undefined, "aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::eye)
  .registerOp<Tensor (int64_t, int64_t, const TensorOptions &)>(Backend::Undefined, "aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::eye)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::flatten(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor", &TypeDefault::flatten)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::Undefined, "aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)", &TypeDefault::fill_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::Undefined, "aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)", &TypeDefault::fill_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::floor(Tensor self) -> Tensor", &TypeDefault::floor)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::frac(Tensor self) -> Tensor", &TypeDefault::frac)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, Scalar, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::full)
  #endif
  .registerOp<Tensor (IntArrayRef, Scalar, const TensorOptions &)>(Backend::Undefined, "aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::full)
  .registerOp<Tensor & (Tensor &, IntArrayRef, Scalar)>(Backend::Undefined, "aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::full_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::full_like(Tensor self, Scalar fill_value) -> Tensor", &TypeDefault::full_like)
  .registerOp<Tensor (const Tensor &, Scalar, const TensorOptions &)>(Backend::Undefined, "aten::full_like.dtype(Tensor self, Scalar fill_value, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::full_like)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode) -> Tensor", &TypeDefault::grid_sampler)
  .registerOp<Tensor (int64_t, const TensorOptions &)>(Backend::Undefined, "aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::hann_window)
  .registerOp<Tensor (int64_t, bool, const TensorOptions &)>(Backend::Undefined, "aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::hann_window)
  .registerOp<Tensor (int64_t, const TensorOptions &)>(Backend::Undefined, "aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::hamming_window)
  .registerOp<Tensor (int64_t, bool, const TensorOptions &)>(Backend::Undefined, "aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::hamming_window)
  .registerOp<Tensor (int64_t, bool, double, const TensorOptions &)>(Backend::Undefined, "aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::hamming_window)
  .registerOp<Tensor (int64_t, bool, double, double, const TensorOptions &)>(Backend::Undefined, "aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::hamming_window)
  .registerOp<Tensor (const Tensor &, const Tensor &, double, int64_t)>(Backend::Undefined, "aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor", &TypeDefault::hinge_embedding_loss)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &, double, bool)>(Backend::Undefined, "aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor", &TypeDefault::group_norm)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor", &TypeDefault::fft)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor", &TypeDefault::ifft)
  .registerOp<Tensor (const Tensor &, int64_t, bool, bool)>(Backend::Undefined, "aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor", &TypeDefault::rfft)
  .registerOp<Tensor (const Tensor &, int64_t, bool, bool, IntArrayRef)>(Backend::Undefined, "aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor", &TypeDefault::irfft)
  .registerOp<int64_t (int64_t)>(Backend::Undefined, "aten::_cufft_get_plan_cache_size(int device_index) -> int", &TypeDefault::_cufft_get_plan_cache_size)
  .registerOp<int64_t (int64_t)>(Backend::Undefined, "aten::_cufft_get_plan_cache_max_size(int device_index) -> int", &TypeDefault::_cufft_get_plan_cache_max_size)
  .registerOp<void (int64_t, int64_t)>(Backend::Undefined, "aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> void", &TypeDefault::_cufft_set_plan_cache_max_size)
  .registerOp<void (int64_t)>(Backend::Undefined, "aten::_cufft_clear_plan_cache(int device_index) -> void", &TypeDefault::_cufft_clear_plan_cache)
  .registerOp<Tensor (const Tensor &, TensorList)>(Backend::Undefined, "aten::index(Tensor self, Tensor?[] indices) -> Tensor", &TypeDefault::index)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)", &TypeDefault::index_copy_)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor", &TypeDefault::index_copy)
  .registerOp<Tensor & (Tensor &, TensorList, const Tensor &, bool)>(Backend::Undefined, "aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)", &TypeDefault::index_put_)
  .registerOp<Tensor (const Tensor &, TensorList, const Tensor &, bool)>(Backend::Undefined, "aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor", &TypeDefault::index_put)
  .registerOp<Tensor & (Tensor &, TensorList, const Tensor &, bool, bool)>(Backend::Undefined, "aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)", &TypeDefault::_index_put_impl_)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool)>(Backend::Undefined, "aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor", &TypeDefault::instance_norm)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::inverse(Tensor self) -> Tensor", &TypeDefault::inverse)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::Undefined, "aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::inverse_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, double, double, bool)>(Backend::Undefined, "aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor", &TypeDefault::isclose)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::isnan(Tensor self) -> Tensor", &TypeDefault::isnan)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::is_distributed(Tensor self) -> bool", &TypeDefault::is_distributed)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::is_floating_point(Tensor self) -> bool", &TypeDefault::is_floating_point)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::is_complex(Tensor self) -> bool", &TypeDefault::is_complex)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::is_nonzero(Tensor self) -> bool", &TypeDefault::is_nonzero)
  .registerOp<bool (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::is_same_size(Tensor self, Tensor other) -> bool", &TypeDefault::is_same_size)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::is_signed(Tensor self) -> bool", &TypeDefault::is_signed)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::kl_div(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &TypeDefault::kl_div)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, int64_t, bool)>(Backend::Undefined, "aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)", &TypeDefault::kthvalue)
  .registerOp<Tensor (const Tensor &, IntArrayRef, const Tensor &, const Tensor &, double, bool)>(Backend::Undefined, "aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor", &TypeDefault::layer_norm)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor", &TypeDefault::linear)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(Backend::Undefined, "aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor", &TypeDefault::fbgemm_linear_int8_weight_fp32_activation)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(Backend::Undefined, "aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor", &TypeDefault::fbgemm_linear_int8_weight)
  .registerOp<std::tuple<Tensor,Tensor,double,int64_t> (const Tensor &)>(Backend::Undefined, "aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)", &TypeDefault::fbgemm_linear_quantize_weight)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor", &TypeDefault::fbgemm_pack_gemm_matrix_fp16)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor", &TypeDefault::fbgemm_linear_fp16_weight_fp32_activation)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor", &TypeDefault::fbgemm_linear_fp16_weight)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor", &TypeDefault::fbgemm_pack_quantized_matrix)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::fbgemm_pack_quantized_matrix(Tensor input, int K, int N) -> Tensor", &TypeDefault::fbgemm_pack_quantized_matrix)
  .registerOp<bool ()>(Backend::Undefined, "aten::fbgemm_is_cpu_supported() -> bool", &TypeDefault::fbgemm_is_cpu_supported)
  .registerOp<Tensor (Scalar, Scalar, int64_t, const TensorOptions &)>(Backend::Undefined, "aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::linspace)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::log(Tensor self) -> Tensor", &TypeDefault::log)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::log10(Tensor self) -> Tensor", &TypeDefault::log10)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::log1p(Tensor self) -> Tensor", &TypeDefault::log1p)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::log2(Tensor self) -> Tensor", &TypeDefault::log2)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::logdet(Tensor self) -> Tensor", &TypeDefault::logdet)
  .registerOp<Tensor (Scalar, Scalar, int64_t, double, const TensorOptions &)>(Backend::Undefined, "aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::logspace)
  .registerOp<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::log_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor", &TypeDefault::log_softmax)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>(Backend::Undefined, "aten::log_softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::log_softmax)
  #endif
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor", &TypeDefault::logsumexp)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::logsumexp_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>(Backend::Undefined, "aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor", &TypeDefault::margin_ranking_loss)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::matmul(Tensor self, Tensor other) -> Tensor", &TypeDefault::matmul)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::matmul_out)
  .registerOp<Tensor (const Tensor &, double, bool)>(Backend::Undefined, "aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor", &TypeDefault::matrix_rank)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor", &TypeDefault::matrix_rank)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::matrix_power(Tensor self, int n) -> Tensor", &TypeDefault::matrix_power)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)", &TypeDefault::max)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)", &TypeDefault::max_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor", &TypeDefault::max_values)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::Undefined, "aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)", &TypeDefault::max_pool1d_with_indices)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::Undefined, "aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor", &TypeDefault::max_pool1d)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::Undefined, "aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor", &TypeDefault::max_pool2d)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::Undefined, "aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor", &TypeDefault::max_pool3d)
  .registerOp<Tensor (const Tensor &, c10::optional<ScalarType>)>(Backend::Undefined, "aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::mean)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::mean)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::mean_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)", &TypeDefault::median)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)", &TypeDefault::median_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)", &TypeDefault::min)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)", &TypeDefault::min_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor", &TypeDefault::min_values)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>(Backend::Undefined, "aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor", &TypeDefault::mkldnn_convolution)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool)>(Backend::Undefined, "aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor", &TypeDefault::mkldnn_convolution_backward_input)
  .registerOp<std::tuple<Tensor,Tensor> (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool)>(Backend::Undefined, "aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)", &TypeDefault::mkldnn_convolution_backward_weights)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>)>(Backend::Undefined, "aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &TypeDefault::mkldnn_convolution_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor", &TypeDefault::_sparse_mm)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)", &TypeDefault::mode)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)", &TypeDefault::mode_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::mul.Scalar(Tensor self, Scalar other) -> Tensor", &TypeDefault::mul)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::Undefined, "aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &TypeDefault::mul_)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::mvlgamma(Tensor self, int p) -> Tensor", &TypeDefault::mvlgamma)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::Undefined, "aten::mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)", &TypeDefault::mvlgamma_)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::Undefined, "aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)", &TypeDefault::narrow)
  .registerOp<bool ()>(Backend::Undefined, "aten::_nnpack_available() -> bool", &TypeDefault::_nnpack_available)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding) -> Tensor", &TypeDefault::_nnpack_spatial_convolution)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>)>(Backend::Undefined, "aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &TypeDefault::_nnpack_spatial_convolution_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor", &TypeDefault::_nnpack_spatial_convolution_backward_input)
  .registerOp<Tensor (const Tensor &, IntArrayRef, const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor", &TypeDefault::_nnpack_spatial_convolution_backward_weight)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::ones)
  #endif
  .registerOp<Tensor (IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::ones)
  .registerOp<Tensor & (Tensor &, IntArrayRef)>(Backend::Undefined, "aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::ones_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::ones_like(Tensor self) -> Tensor", &TypeDefault::ones_like)
  .registerOp<Tensor (const Tensor &, const TensorOptions &)>(Backend::Undefined, "aten::ones_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::ones_like)
  .registerOp<Tensor (const Tensor &, const Tensor &, double, double, bool)>(Backend::Undefined, "aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor", &TypeDefault::pairwise_distance)
  .registerOp<Tensor (const Tensor &, const Tensor &, double)>(Backend::Undefined, "aten::cdist(Tensor x1, Tensor x2, float p=2) -> Tensor", &TypeDefault::cdist)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, double, const Tensor &)>(Backend::Undefined, "aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor", &TypeDefault::_cdist_backward)
  .registerOp<Tensor (const Tensor &, double)>(Backend::Undefined, "aten::pdist(Tensor self, float p=2) -> Tensor", &TypeDefault::pdist)
  .registerOp<Tensor (const Tensor &, double)>(Backend::Undefined, "aten::_pdist_forward(Tensor self, float p=2) -> Tensor", &TypeDefault::_pdist_forward)
  .registerOp<Tensor (const Tensor &, const Tensor &, double, const Tensor &)>(Backend::Undefined, "aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor", &TypeDefault::_pdist_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, double)>(Backend::Undefined, "aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor", &TypeDefault::cosine_similarity)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)", &TypeDefault::permute)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::numpy_T(Tensor(a) self) -> Tensor(a)", &TypeDefault::numpy_T)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor", &TypeDefault::pixel_shuffle)
  .registerOp<bool (const Tensor &)>(Backend::Undefined, "aten::is_pinned(Tensor self) -> bool", &TypeDefault::is_pinned)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::pin_memory(Tensor self) -> Tensor", &TypeDefault::pin_memory)
  .registerOp<Tensor (const Tensor &, double)>(Backend::Undefined, "aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor", &TypeDefault::pinverse)
  .registerOp<Tensor (const Tensor &, const Tensor &, bool, bool, double, int64_t)>(Backend::Undefined, "aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor", &TypeDefault::poisson_nll_loss)
  .registerOp<Tensor (Scalar, const TensorOptions &)>(Backend::Undefined, "aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::scalar_tensor)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::rand)
  #endif
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::rand)
  #endif
  .registerOp<Tensor (IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::rand)
  .registerOp<Tensor (IntArrayRef, Generator *, const TensorOptions &)>(Backend::Undefined, "aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::rand)
  .registerOp<Tensor & (Tensor &, IntArrayRef)>(Backend::Undefined, "aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::rand_out)
  .registerOp<Tensor & (Tensor &, IntArrayRef, Generator *)>(Backend::Undefined, "aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::rand_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::rand_like(Tensor self) -> Tensor", &TypeDefault::rand_like)
  .registerOp<Tensor (const Tensor &, const TensorOptions &)>(Backend::Undefined, "aten::rand_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::rand_like)
  .registerOp<Tensor (int64_t, IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randint)
  .registerOp<Tensor (int64_t, IntArrayRef, Generator *, const TensorOptions &)>(Backend::Undefined, "aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randint)
  .registerOp<Tensor (int64_t, int64_t, IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randint)
  .registerOp<Tensor (int64_t, int64_t, IntArrayRef, Generator *, const TensorOptions &)>(Backend::Undefined, "aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randint)
  .registerOp<Tensor & (Tensor &, int64_t, IntArrayRef)>(Backend::Undefined, "aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randint_out)
  .registerOp<Tensor & (Tensor &, int64_t, IntArrayRef, Generator *)>(Backend::Undefined, "aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randint_out)
  .registerOp<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef)>(Backend::Undefined, "aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randint_out)
  .registerOp<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef, Generator *)>(Backend::Undefined, "aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randint_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::randint_like(Tensor self, int high) -> Tensor", &TypeDefault::randint_like)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::randint_like.low(Tensor self, int low, int high) -> Tensor", &TypeDefault::randint_like)
  .registerOp<Tensor (const Tensor &, int64_t, const TensorOptions &)>(Backend::Undefined, "aten::randint_like.dtype(Tensor self, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::randint_like)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, const TensorOptions &)>(Backend::Undefined, "aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::randint_like)
  .registerOp<Tensor (IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randn)
  .registerOp<Tensor (IntArrayRef, Generator *, const TensorOptions &)>(Backend::Undefined, "aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randn)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randn)
  #endif
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randn)
  #endif
  .registerOp<Tensor & (Tensor &, IntArrayRef)>(Backend::Undefined, "aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randn_out)
  .registerOp<Tensor & (Tensor &, IntArrayRef, Generator *)>(Backend::Undefined, "aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randn_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::randn_like(Tensor self) -> Tensor", &TypeDefault::randn_like)
  .registerOp<Tensor (const Tensor &, const TensorOptions &)>(Backend::Undefined, "aten::randn_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::randn_like)
  .registerOp<Tensor (int64_t, const TensorOptions &)>(Backend::Undefined, "aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randperm)
  .registerOp<Tensor (int64_t, Generator *, const TensorOptions &)>(Backend::Undefined, "aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::randperm)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::Undefined, "aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::randperm_out)
  .registerOp<Tensor (Scalar, Scalar, Scalar, const TensorOptions &)>(Backend::Undefined, "aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::range)
  .registerOp<Tensor (Scalar, Scalar, const TensorOptions &)>(Backend::Undefined, "aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::range)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::reciprocal(Tensor self) -> Tensor", &TypeDefault::reciprocal)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::neg(Tensor self) -> Tensor", &TypeDefault::neg)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::neg_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::neg_)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::repeat(Tensor self, int[] repeats) -> Tensor", &TypeDefault::repeat)
  .registerOp<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>(Backend::Undefined, "aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor", &TypeDefault::repeat_interleave)
  .registerOp<Tensor (const Tensor &, int64_t, c10::optional<int64_t>)>(Backend::Undefined, "aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor", &TypeDefault::repeat_interleave)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::reshape(Tensor self, int[] shape) -> Tensor", &TypeDefault::reshape)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::reshape_as(Tensor self, Tensor other) -> Tensor", &TypeDefault::reshape_as)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::round(Tensor self) -> Tensor", &TypeDefault::round)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar, bool, Generator *)>(Backend::Undefined, "aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor", &TypeDefault::rrelu)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, bool, Generator *)>(Backend::Undefined, "aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)", &TypeDefault::rrelu_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::rsqrt(Tensor self) -> Tensor", &TypeDefault::rsqrt)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, Dimname, int64_t)>(Backend::Undefined, "aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)", &TypeDefault::select)
  #endif
  .registerOp<Tensor (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)", &TypeDefault::select)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::selu(Tensor self) -> Tensor", &TypeDefault::selu)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::selu_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::selu_)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor", &TypeDefault::celu)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::Undefined, "aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)", &TypeDefault::celu_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::sin(Tensor self) -> Tensor", &TypeDefault::sin)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::sinh(Tensor self) -> Tensor", &TypeDefault::sinh)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::detach(Tensor self) -> Tensor", &TypeDefault::detach)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::detach_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::detach_)
  .registerOp<int64_t (const Tensor &, int64_t)>(Backend::Undefined, "aten::size.int(Tensor self, int dim) -> int", &TypeDefault::size)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<int64_t (const Tensor &, Dimname)>(Backend::Undefined, "aten::size.Dimname(Tensor self, Dimname dim) -> int", &TypeDefault::size)
  #endif
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t)>(Backend::Undefined, "aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)", &TypeDefault::slice)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &)>(Backend::Undefined, "aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)", &TypeDefault::slogdet)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::smm(Tensor self, Tensor mat2) -> Tensor", &TypeDefault::smm)
  .registerOp<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>(Backend::Undefined, "aten::softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor", &TypeDefault::softmax)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>(Backend::Undefined, "aten::softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::softmax)
  #endif
  .registerOp<std::vector<Tensor> (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]", &TypeDefault::split)
  .registerOp<std::vector<Tensor> (const Tensor &, IntArrayRef, int64_t)>(Backend::Undefined, "aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]", &TypeDefault::split_with_sizes)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::squeeze(Tensor(a) self) -> Tensor(a)", &TypeDefault::squeeze)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)", &TypeDefault::squeeze)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::squeeze_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::squeeze_)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::Undefined, "aten::squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)", &TypeDefault::squeeze_)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &TypeDefault::sspaddmm)
  .registerOp<Tensor (TensorList, int64_t)>(Backend::Undefined, "aten::stack(Tensor[] tensors, int dim=0) -> Tensor", &TypeDefault::stack)
  .registerOp<Tensor & (Tensor &, TensorList, int64_t)>(Backend::Undefined, "aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::stack_out)
  .registerOp<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool)>(Backend::Undefined, "aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor", &TypeDefault::stft)
  .registerOp<int64_t (const Tensor &, int64_t)>(Backend::Undefined, "aten::stride.int(Tensor self, int dim) -> int", &TypeDefault::stride)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<int64_t (const Tensor &, Dimname)>(Backend::Undefined, "aten::stride.Dimname(Tensor self, Dimname dim) -> int", &TypeDefault::stride)
  #endif
  .registerOp<Tensor (const Tensor &, c10::optional<ScalarType>)>(Backend::Undefined, "aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::sum)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::sum)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::sum)
  #endif
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::sum_out)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor & (Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::sum_out)
  #endif
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::sum_to_size(Tensor self, int[] size) -> Tensor", &TypeDefault::sum_to_size)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::sqrt(Tensor self) -> Tensor", &TypeDefault::sqrt)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::std(Tensor self, bool unbiased=True) -> Tensor", &TypeDefault::std)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor", &TypeDefault::std)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool)>(Backend::Undefined, "aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)", &TypeDefault::std_mean)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)", &TypeDefault::std_mean)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::std_out)
  .registerOp<Tensor (const Tensor &, c10::optional<ScalarType>)>(Backend::Undefined, "aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::prod)
  .registerOp<Tensor (const Tensor &, int64_t, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::prod)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::prod_out)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (const Tensor &, Dimname, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor", &TypeDefault::prod)
  #endif
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor & (Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::prod_out)
  #endif
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::t(Tensor(a) self) -> Tensor(a)", &TypeDefault::t)
  .registerOp<Tensor & (Tensor &)>(Backend::Undefined, "aten::t_(Tensor(a!) self) -> Tensor(a!)", &TypeDefault::t_)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::tan(Tensor self) -> Tensor", &TypeDefault::tan)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::tanh(Tensor self) -> Tensor", &TypeDefault::tanh)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor", &TypeDefault::tensordot)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor", &TypeDefault::threshold)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)", &TypeDefault::threshold_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::threshold_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor", &TypeDefault::threshold_backward)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::transpose(Tensor(a) self, int dim0, int dim1) -> Tensor(a)", &TypeDefault::transpose)
  .registerOp<Tensor & (Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)", &TypeDefault::transpose_)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::one_hot(Tensor self, int num_classes=-1) -> Tensor", &TypeDefault::one_hot)
  .registerOp<Tensor (const Tensor &, int64_t, IntArrayRef)>(Backend::Undefined, "aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor", &TypeDefault::rot90)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor", &TypeDefault::trapz)
  .registerOp<Tensor (const Tensor &, double, int64_t)>(Backend::Undefined, "aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor", &TypeDefault::trapz)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>(Backend::Undefined, "aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor", &TypeDefault::_trilinear)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t)>(Backend::Undefined, "aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor", &TypeDefault::triplet_margin_loss)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::trunc(Tensor self) -> Tensor", &TypeDefault::trunc)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::type_as(Tensor self, Tensor other) -> Tensor", &TypeDefault::type_as)
  .registerOp<bool (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool", &TypeDefault::_has_compatible_shallow_copy_type)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::_unsafe_view(Tensor self, int[] size) -> Tensor", &TypeDefault::_unsafe_view)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)", &TypeDefault::unsqueeze)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::Undefined, "aten::unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)", &TypeDefault::unsqueeze_)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::var(Tensor self, bool unbiased=True) -> Tensor", &TypeDefault::var)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor", &TypeDefault::var)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::var_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool)>(Backend::Undefined, "aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)", &TypeDefault::var_mean)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool)>(Backend::Undefined, "aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)", &TypeDefault::var_mean)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::view_as(Tensor self, Tensor other) -> Tensor", &TypeDefault::view_as)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor", &TypeDefault::where)
  .registerOp<std::vector<Tensor> (const Tensor &)>(Backend::Undefined, "aten::where(Tensor condition) -> Tensor[]", &TypeDefault::where)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor", &TypeDefault::norm_except_dim)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor", &TypeDefault::_weight_norm)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)", &TypeDefault::_weight_norm_differentiable_backward)
  #ifdef BUILD_NAMEDTENSOR
  .registerOp<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>(Backend::Undefined, "aten::zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::zeros)
  #endif
  .registerOp<Tensor (IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::zeros)
  .registerOp<Tensor & (Tensor &, IntArrayRef)>(Backend::Undefined, "aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::zeros_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::zeros_like(Tensor self) -> Tensor", &TypeDefault::zeros_like)
  .registerOp<Tensor (const Tensor &, const TensorOptions &)>(Backend::Undefined, "aten::zeros_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::zeros_like)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::_sparse_sum(Tensor self) -> Tensor", &TypeDefault::_sparse_sum)
  .registerOp<Tensor (const Tensor &, ScalarType)>(Backend::Undefined, "aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor", &TypeDefault::_sparse_sum)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor", &TypeDefault::_sparse_sum)
  .registerOp<Tensor (const Tensor &, IntArrayRef, ScalarType)>(Backend::Undefined, "aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor", &TypeDefault::_sparse_sum)
  .registerOp<Tensor (const Tensor &, c10::optional<Scalar>, ScalarType)>(Backend::Undefined, "aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor", &TypeDefault::norm)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::Undefined, "aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor", &TypeDefault::norm)
  .registerOp<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType)>(Backend::Undefined, "aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor", &TypeDefault::norm)
  .registerOp<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool)>(Backend::Undefined, "aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor", &TypeDefault::norm)
  .registerOp<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType)>(Backend::Undefined, "aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::norm_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool)>(Backend::Undefined, "aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::norm_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::frobenius_norm(Tensor self) -> Tensor", &TypeDefault::frobenius_norm)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor", &TypeDefault::frobenius_norm)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::frobenius_norm_out)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor", &TypeDefault::nuclear_norm)
  .registerOp<Tensor & (Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::nuclear_norm_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor", &TypeDefault::nuclear_norm)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::Undefined, "aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::nuclear_norm_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::sub_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor", &TypeDefault::sub)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)", &TypeDefault::sub_)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor", &TypeDefault::sub)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)", &TypeDefault::sub_)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor", &TypeDefault::rsub)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor", &TypeDefault::rsub)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &TypeDefault::_sparse_addmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::addmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &TypeDefault::addmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::Undefined, "aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &TypeDefault::addmm_)
  .registerOp<Tensor (IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &TypeDefault::sparse_coo_tensor)
  .registerOp<Tensor (const Tensor &, const Tensor &, const TensorOptions &)>(Backend::Undefined, "aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::sparse_coo_tensor)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::sparse_coo_tensor)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &)>(Backend::Undefined, "aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::_sparse_coo_tensor_unsafe)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor", &TypeDefault::to_dense_backward)
  .registerOp<int64_t (const Tensor &)>(Backend::Undefined, "aten::numel(Tensor self) -> int", &TypeDefault::numel)
  .registerOp<std::vector<Tensor> (const Tensor &, int64_t)>(Backend::Undefined, "aten::unbind(Tensor(a) self, int dim=0) -> Tensor(a)[]", &TypeDefault::unbind)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor", &TypeDefault::to_mkldnn_backward)
  .registerOp<Tensor (const Tensor &, const TensorOptions &, bool, bool)>(Backend::Undefined, "aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False) -> Tensor", &TypeDefault::to)
  .registerOp<Tensor (const Tensor &, Device, ScalarType, bool, bool)>(Backend::Undefined, "aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor", &TypeDefault::to)
  .registerOp<Tensor (const Tensor &, ScalarType, bool, bool)>(Backend::Undefined, "aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor", &TypeDefault::to)
  .registerOp<Tensor (const Tensor &, const Tensor &, bool, bool)>(Backend::Undefined, "aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False) -> Tensor", &TypeDefault::to)
  .registerOp<std::vector<Tensor> (TensorList)>(Backend::Undefined, "aten::meshgrid(Tensor[] tensors) -> Tensor[]", &TypeDefault::meshgrid)
  .registerOp<Tensor (TensorList)>(Backend::Undefined, "aten::cartesian_prod(Tensor[] tensors) -> Tensor", &TypeDefault::cartesian_prod)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor", &TypeDefault::combinations)
  .registerOp<Scalar (const Tensor &)>(Backend::Undefined, "aten::item(Tensor self) -> Scalar", &TypeDefault::item)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool)>(Backend::Undefined, "aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)", &TypeDefault::lstm)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool)>(Backend::Undefined, "aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)", &TypeDefault::lstm)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>(Backend::Undefined, "aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)", &TypeDefault::gru)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>(Backend::Undefined, "aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)", &TypeDefault::gru)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>(Backend::Undefined, "aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)", &TypeDefault::rnn_tanh)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>(Backend::Undefined, "aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)", &TypeDefault::rnn_tanh)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>(Backend::Undefined, "aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)", &TypeDefault::rnn_relu)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>(Backend::Undefined, "aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)", &TypeDefault::rnn_relu)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)", &TypeDefault::lstm_cell)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor", &TypeDefault::gru_cell)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor", &TypeDefault::rnn_tanh_cell)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor", &TypeDefault::rnn_relu_cell)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool, c10::optional<ScalarType>)>(Backend::Undefined, "aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None) -> (Tensor, Tensor, Tensor)", &TypeDefault::quantized_lstm)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>(Backend::Undefined, "aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)", &TypeDefault::quantized_gru)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>(Backend::Undefined, "aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)", &TypeDefault::quantized_gru)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(Backend::Undefined, "aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)", &TypeDefault::quantized_lstm_cell)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(Backend::Undefined, "aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor", &TypeDefault::quantized_gru_cell)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(Backend::Undefined, "aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor", &TypeDefault::quantized_rnn_relu_cell)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(Backend::Undefined, "aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor", &TypeDefault::quantized_rnn_tanh_cell)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)", &TypeDefault::_pack_padded_sequence)
  .registerOp<Tensor (const Tensor &, IntArrayRef, const Tensor &, bool)>(Backend::Undefined, "aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor", &TypeDefault::_pack_padded_sequence_backward)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, Scalar, int64_t)>(Backend::Undefined, "aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)", &TypeDefault::_pad_packed_sequence)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor", &TypeDefault::masked_fill)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor", &TypeDefault::masked_fill)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor", &TypeDefault::masked_scatter)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor", &TypeDefault::index_add)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>(Backend::Undefined, "aten::index_fill.Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor", &TypeDefault::index_fill)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::index_fill.Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor", &TypeDefault::index_fill)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor", &TypeDefault::scatter)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>(Backend::Undefined, "aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor", &TypeDefault::scatter)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor", &TypeDefault::scatter_add)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::Undefined, "aten::atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)", &TypeDefault::atan2_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)", &TypeDefault::addcdiv_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>)>(Backend::Undefined, "aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::cross_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>(Backend::Undefined, "aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor", &TypeDefault::cross)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::triu(Tensor self, int diagonal=0) -> Tensor", &TypeDefault::triu)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::Undefined, "aten::tril(Tensor self, int diagonal=0) -> Tensor", &TypeDefault::tril)
  .registerOp<std::vector<Tensor> (const Tensor &)>(Backend::Undefined, "aten::nonzero_numpy(Tensor self) -> Tensor[]", &TypeDefault::nonzero_numpy)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor", &TypeDefault::_gather_sparse_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::addcmul_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor", &TypeDefault::addcmul)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)", &TypeDefault::addcmul_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::addcdiv_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::Undefined, "aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor", &TypeDefault::addcdiv)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, bool, bool, bool)>(Backend::Undefined, "aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)", &TypeDefault::triangular_solve_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, bool, bool)>(Backend::Undefined, "aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)", &TypeDefault::triangular_solve)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool, bool)>(Backend::Undefined, "aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)", &TypeDefault::symeig_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool)>(Backend::Undefined, "aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)", &TypeDefault::symeig)
  .registerOp<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, bool, bool)>(Backend::Undefined, "aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)", &TypeDefault::svd_out)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool)>(Backend::Undefined, "aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)", &TypeDefault::svd)
  .registerOp<Tensor & (Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::cholesky_out)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::Undefined, "aten::cholesky(Tensor self, bool upper=False) -> Tensor", &TypeDefault::cholesky)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::cholesky_solve_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor", &TypeDefault::cholesky_solve)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)", &TypeDefault::solve)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)", &TypeDefault::solve_out)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool)>(Backend::Undefined, "aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)", &TypeDefault::qr_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool)>(Backend::Undefined, "aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)", &TypeDefault::qr)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::lu_solve_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor", &TypeDefault::lu_solve)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::Undefined, "aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::atan2_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::Undefined, "aten::atan2(Tensor self, Tensor other) -> Tensor", &TypeDefault::atan2)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::Undefined, "aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor", &TypeDefault::argsort)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, int64_t, bool, bool)>(Backend::Undefined, "aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)", &TypeDefault::topk)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::all(Tensor self) -> Tensor", &TypeDefault::all)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::any(Tensor self) -> Tensor", &TypeDefault::any)
  .registerOp<Tensor (double, double, IntArrayRef, Generator *, const TensorOptions &)>(Backend::Undefined, "aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &TypeDefault::normal)
  .registerOp<Tensor & (Tensor &, double, double, IntArrayRef, Generator *)>(Backend::Undefined, "aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::normal_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::alias(Tensor(a) self) -> Tensor(a)", &TypeDefault::alias)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::multilabel_margin_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::Undefined, "aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &TypeDefault::multilabel_margin_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::nll_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor", &TypeDefault::nll_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::nll_loss2d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::Undefined, "aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor", &TypeDefault::nll_loss2d)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::Undefined, "aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::log_sigmoid_out)
  .registerOp<Tensor (const Tensor &)>(Backend::Undefined, "aten::log_sigmoid(Tensor self) -> Tensor", &TypeDefault::log_sigmoid)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::Undefined, "aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor", &TypeDefault::adaptive_avg_pool2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::thnn_conv2d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor", &TypeDefault::thnn_conv2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::thnn_conv_depthwise2d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor", &TypeDefault::thnn_conv_depthwise2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::thnn_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)", &TypeDefault::thnn_conv3d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::Undefined, "aten::thnn_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor", &TypeDefault::thnn_conv3d);
}
