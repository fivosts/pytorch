// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/CUDAType.h>

// @generated by aten/src/ATen/gen.py

#include <c10/core/TensorImpl.h>
#include <ATen/CUDAGenerator.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#ifdef BUILD_NAMEDTENSOR
#include <ATen/NamedTensorUtils.h>
#endif
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>
#include <ATen/core/ATenDispatch.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/DeviceGuard.h>
#include <ATen/cuda/ATenCUDAGeneral.h>
#include <ATen/cuda/CUDADevice.h>
#include <ATen/cuda/CUDAContext.h>
#include <ATen/LegacyTHFunctionsCUDA.h>

namespace at {

/* example
Tensor * CUDAType::add(Tensor & a, Tensor & b) {
  std::cout << "add Tensor with backend CUDA\n";
  return &a;
}
*/

std::tuple<Tensor,Tensor> CUDAType::_cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) {
#ifdef BUILD_NAMEDTENSOR
    if (log_probs.has_names() || targets.has_names()) {
        AT_ERROR("_cudnn_ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::_cudnn_ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);
}
Tensor CUDAType::_cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(weight_arr)) {
        AT_ERROR("_cudnn_rnn_flatten_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight_arr));
    return at::native::_cudnn_rnn_flatten_weight(weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAType::_cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight_buf.has_names() || hx.has_names() || cx.has_names() || dropout_state.has_names() || at::has_names(weight)) {
        AT_ERROR("_cudnn_rnn: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_cudnn_rnn(input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
}
std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> CUDAType::_cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight_buf.has_names() || hx.has_names() || cx.has_names() || output.has_names() || grad_output.has_names() || grad_hy.has_names() || grad_cy.has_names() || dropout_state.has_names() || reserve.has_names() || at::has_names(weight)) {
        AT_ERROR("_cudnn_rnn_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_cudnn_rnn_backward(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
}
Tensor CUDAType::_cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::_cudnn_init_dropout_state(dropout, train, dropout_seed, options);
}
std::tuple<Tensor,Tensor> CUDAType::_fused_dropout(const Tensor & self, double p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fused_dropout_cuda(self, p, generator);
}
Tensor CUDAType::_masked_scale(const Tensor & self, const Tensor & mask, double scale) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("_masked_scale: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scale_cuda(self, mask, scale);
}
Tensor & CUDAType::abs_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs__cuda(self);
}
Tensor & CUDAType::abs_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs_out_cuda(out, self);
}
Tensor & CUDAType::acos_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos__cuda(self);
}
Tensor & CUDAType::acos_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos_out_cuda(out, self);
}
Tensor CUDAType::add(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & CUDAType::add_(Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor & CUDAType::add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out(out, self, other, alpha);
}
Tensor CUDAType::addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat.has_names() || vec.has_names()) {
        AT_ERROR("addmv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addmv(self, mat, vec, beta, alpha);
}
Tensor & CUDAType::addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat.has_names() || vec.has_names()) {
        AT_ERROR("addmv_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addmv_(self, mat, vec, beta, alpha);
}
Tensor & CUDAType::addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat.has_names() || vec.has_names()) {
        AT_ERROR("addmv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addmv_out(out, self, mat, vec, beta, alpha);
}
Tensor & CUDAType::arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("arange_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_cuda_out(out, start, end, step);
}
Tensor CUDAType::as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::as_strided_tensorimpl(self, size, stride, storage_offset);
}
Tensor & CUDAType::asin_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin__cuda(self);
}
Tensor & CUDAType::asin_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin_out_cuda(out, self);
}
Tensor & CUDAType::atan_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan__cuda(self);
}
Tensor & CUDAType::atan_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan_out_cuda(out, self);
}
Tensor CUDAType::baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_cuda(self, batch1, batch2, beta, alpha);
}
Tensor & CUDAType::baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm__cuda(self, batch1, batch2, beta, alpha);
}
Tensor & CUDAType::baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_out_cuda(out, self, batch1, batch2, beta, alpha);
}
Tensor & CUDAType::bernoulli_(Tensor & self, const Tensor & p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_tensor_cuda_(self, p, generator);
}
Tensor & CUDAType::bernoulli_(Tensor & self, double p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_scalar_cuda_(self, p, generator);
}
Tensor CUDAType::bincount(const Tensor & self, const Tensor & weights, int64_t minlength) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weights.has_names()) {
        AT_ERROR("bincount: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_bincount_cuda(self, weights, minlength);
}
Tensor & CUDAType::bitwise_not_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("bitwise_not_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_out(out, self);
}
Tensor & CUDAType::logical_not_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("logical_not_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_out(out, self);
}
Tensor & CUDAType::logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor_out(out, self, other);
}
Tensor CUDAType::bmm(const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("bmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_cuda(self, mat2);
}
Tensor & CUDAType::bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat2.has_names()) {
        AT_ERROR("bmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_out_cuda(out, self, mat2);
}
Tensor & CUDAType::ceil_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil__cuda(self);
}
Tensor & CUDAType::ceil_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil_out_cuda(out, self);
}
Tensor & CUDAType::clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp__cuda(self, min, max);
}
Tensor & CUDAType::clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_out_cuda(out, self, min, max);
}
Tensor & CUDAType::clamp_max_(Tensor & self, Scalar max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max__cuda(self, max);
}
Tensor & CUDAType::clamp_max_out(Tensor & out, const Tensor & self, Scalar max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max_out_cuda(out, self, max);
}
Tensor & CUDAType::clamp_min_(Tensor & self, Scalar min) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min__cuda(self, min);
}
Tensor & CUDAType::clamp_min_out(Tensor & out, const Tensor & self, Scalar min) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min_out_cuda(out, self, min);
}
Tensor & CUDAType::cos_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos__cuda(self);
}
Tensor & CUDAType::cos_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos_out_cuda(out, self);
}
Tensor & CUDAType::cosh_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh__cuda(self);
}
Tensor & CUDAType::cosh_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh_out_cuda(out, self);
}
Tensor CUDAType::cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) {
#ifdef BUILD_NAMEDTENSOR
    if (theta.has_names()) {
        AT_ERROR("cudnn_affine_grid_generator: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::cudnn_affine_grid_generator_forward(theta, N, C, H, W);
}
Tensor CUDAType::cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names()) {
        AT_ERROR("cudnn_affine_grid_generator_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::cudnn_affine_grid_generator_backward(grad, N, C, H, W);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("cudnn_batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::cudnn_batch_norm(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grad_output.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_var.has_names()) {
        AT_ERROR("cudnn_batch_norm_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::cudnn_batch_norm_backward(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
}
Tensor CUDAType::cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("cudnn_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("cudnn_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("cudnn_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAType::cudnn_convolution_backward_bias(const Tensor & grad_output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("cudnn_convolution_backward_bias: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_backward_bias(grad_output);
}
Tensor CUDAType::cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("cudnn_convolution_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_backward_weight(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("cudnn_convolution_transpose: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_transpose(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("cudnn_convolution_transpose_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_transpose_backward(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAType::cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("cudnn_convolution_transpose_backward_bias: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_backward_bias(grad_output);
}
Tensor CUDAType::cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("cudnn_convolution_transpose_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_transpose_backward_input(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("cudnn_convolution_transpose_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_transpose_backward_weight(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::cudnn_grid_sampler(const Tensor & self, const Tensor & grid) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grid.has_names()) {
        AT_ERROR("cudnn_grid_sampler: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_grid_sampler_forward(self, grid);
}
std::tuple<Tensor,Tensor> CUDAType::cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grid.has_names() || grad_output.has_names()) {
        AT_ERROR("cudnn_grid_sampler_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_grid_sampler_backward(self, grid, grad_output);
}
std::tuple<Tensor,Tensor> CUDAType::_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
#ifdef BUILD_NAMEDTENSOR
    if (log_probs.has_names() || targets.has_names()) {
        AT_ERROR("_ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss_gpu(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}
Tensor CUDAType::_ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || log_probs.has_names() || targets.has_names() || neg_log_likelihood.has_names() || log_alpha.has_names()) {
        AT_ERROR("_ctc_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::ctc_loss_backward_gpu(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}
Tensor CUDAType::dot(const Tensor & self, const Tensor & tensor) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor.has_names()) {
        AT_ERROR("dot: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_dot(self, tensor);
}
Tensor CUDAType::embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || indices.has_names()) {
        AT_ERROR("embedding_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::embedding_dense_backward_cuda(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}
Tensor & CUDAType::embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || indices.has_names()) {
        AT_ERROR("embedding_renorm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::embedding_renorm_cuda_(self, indices, max_norm, norm_type);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> CUDAType::_embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
#ifdef BUILD_NAMEDTENSOR
    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::_embedding_bag_cuda(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor CUDAType::_embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || maximum_indices.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_dense_backward_cuda(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor CUDAType::_embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || weight.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names()) {
        AT_ERROR("_embedding_bag_per_sample_weights_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_per_sample_weights_backward_cuda(grad, weight, indices, offsets, offset2bag, mode);
}
Tensor CUDAType::empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_cuda(size, options, memory_format);
}
Tensor & CUDAType::resize_(Tensor & self, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("resize_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::resize_cuda_(self, size);
}
Tensor CUDAType::empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_strided_cuda(size, stride, options);
}
Tensor & CUDAType::erf_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf__cuda(self);
}
Tensor & CUDAType::erf_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf_out_cuda(out, self);
}
Tensor & CUDAType::erfc_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc__cuda(self);
}
Tensor & CUDAType::erfc_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc_out_cuda(out, self);
}
Tensor & CUDAType::exp_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp__cuda(self);
}
Tensor & CUDAType::exp_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp_out_cuda(out, self);
}
Tensor & CUDAType::expm1_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1__cuda(self);
}
Tensor & CUDAType::expm1_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1_out_cuda(out, self);
}
Tensor & CUDAType::eye_out(Tensor & out, int64_t n) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("eye_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cuda(out, n);
}
Tensor & CUDAType::eye_out(Tensor & out, int64_t n, int64_t m) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("eye_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cuda(out, n, m);
}
Tensor & CUDAType::floor_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor__cuda(self);
}
Tensor & CUDAType::floor_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor_out_cuda(out, self);
}
Tensor & CUDAType::frac_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_frac__cuda(self);
}
Tensor & CUDAType::frac_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_frac_out_cuda(out, self);
}
Tensor CUDAType::grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_2d_cuda(input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> CUDAType::grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_2d_backward_cuda(grad_output, input, grid, interpolation_mode, padding_mode);
}
Tensor CUDAType::grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_3d_cuda(input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> CUDAType::grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_3d_backward_cuda(grad_output, input, grid, interpolation_mode, padding_mode);
}
Tensor CUDAType::ger(const Tensor & self, const Tensor & vec2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec2.has_names()) {
        AT_ERROR("ger: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ger(self, vec2);
}
Tensor & CUDAType::ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec2.has_names()) {
        AT_ERROR("ger_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ger_out(out, self, vec2);
}
Tensor CUDAType::_fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_fft_with_size: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_fft_cufft(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
}
Tensor CUDAType::_inverse_helper(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_inverse_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_inverse_helper_cuda(self);
}
Tensor CUDAType::kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("kl_div_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div_backward_cuda(grad_output, self, target, reduction);
}
std::tuple<Tensor &,Tensor &> CUDAType::kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("kthvalue_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue_out_cuda(values, indices, self, k, dim, keepdim);
}
Tensor & CUDAType::linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("linspace_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::linspace_cuda_out(out, start, end, steps);
}
Tensor & CUDAType::log_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log__cuda(self);
}
Tensor & CUDAType::log_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log_out_cuda(out, self);
}
Tensor & CUDAType::log10_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10__cuda(self);
}
Tensor & CUDAType::log10_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10_out_cuda(out, self);
}
Tensor & CUDAType::log1p_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p__cuda(self);
}
Tensor & CUDAType::log1p_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p_out_cuda(out, self);
}
Tensor & CUDAType::log2_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2__cuda(self);
}
Tensor & CUDAType::log2_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2_out_cuda(out, self);
}
Tensor & CUDAType::logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("logspace_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::logspace_cuda_out(out, start, end, steps, base);
}
Tensor CUDAType::_log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_cuda(self, dim, half_to_float);
}
Tensor CUDAType::_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names() || self.has_names()) {
        AT_ERROR("_log_softmax_backward_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_backward_cuda(grad_output, output, dim, self);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("miopen_batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::miopen_batch_norm(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || grad_output.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_var.has_names()) {
        AT_ERROR("miopen_batch_norm_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::miopen_batch_norm_backward(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
}
Tensor CUDAType::miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("miopen_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("miopen_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("miopen_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAType::miopen_convolution_backward_bias(const Tensor & grad_output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("miopen_convolution_backward_bias: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_convolution_backward_bias(grad_output);
}
Tensor CUDAType::miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("miopen_convolution_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_backward_weight(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("miopen_convolution_transpose: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_transpose(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("miopen_convolution_transpose_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_transpose_backward(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAType::miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("miopen_convolution_transpose_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_convolution_transpose_backward_input(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("miopen_convolution_transpose_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_transpose_backward_weight(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("miopen_depthwise_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_depthwise_convolution(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAType::miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("miopen_depthwise_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_depthwise_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("miopen_depthwise_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_depthwise_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAType::miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("miopen_depthwise_convolution_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_depthwise_convolution_backward_weight(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAType::miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || hx.has_names() || cx.has_names() || dropout_state.has_names() || at::has_names(weight)) {
        AT_ERROR("miopen_rnn: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::miopen_rnn(input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
}
std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> CUDAType::miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight_buf.has_names() || hx.has_names() || cx.has_names() || output.has_names() || grad_output.has_names() || grad_hy.has_names() || grad_cy.has_names() || dropout_state.has_names() || reserve.has_names() || at::has_names(weight)) {
        AT_ERROR("miopen_rnn_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::miopen_rnn_backward(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
}
Tensor CUDAType::mm(const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("mm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_mm(self, mat2);
}
Tensor & CUDAType::mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat2.has_names()) {
        AT_ERROR("mm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_mm_out(out, self, mat2);
}
Tensor CUDAType::mul(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & CUDAType::mul_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor & CUDAType::mul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out(out, self, other);
}
Tensor CUDAType::mv(const Tensor & self, const Tensor & vec) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec.has_names()) {
        AT_ERROR("mv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_mv(self, vec);
}
Tensor & CUDAType::mv_out(Tensor & out, const Tensor & self, const Tensor & vec) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec.has_names()) {
        AT_ERROR("mv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_mv_out(out, self, vec);
}
Tensor CUDAType::narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("narrow_copy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_dense(self, dim, start, length);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("native_batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_cuda(input, weight, bias, running_mean, running_var, training, momentum, eps);
}
std::tuple<Tensor,Tensor> CUDAType::batch_norm_stats(const Tensor & input, double eps) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names()) {
        AT_ERROR("batch_norm_stats: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_stats_cuda(input, eps);
}
Tensor CUDAType::batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || mean.has_names() || invstd.has_names()) {
        AT_ERROR("batch_norm_elemt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_elemt_cuda(input, weight, bias, mean, invstd, eps);
}
std::tuple<Tensor,Tensor> CUDAType::batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || mean.has_names() || invstd.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("batch_norm_gather_stats: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_gather_stats_cuda(input, mean, invstd, running_mean, running_var, momentum, eps, count);
}
std::tuple<Tensor,Tensor> CUDAType::batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, IntArrayRef counts) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || mean.has_names() || invstd.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("batch_norm_gather_stats_with_counts: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_gather_stats_with_counts_cuda(input, mean, invstd, running_mean, running_var, momentum, eps, counts);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_out.has_names() || input.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_invstd.has_names()) {
        AT_ERROR("native_batch_norm_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::batch_norm_backward_cuda(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> CUDAType::batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, bool input_g, bool weight_g, bool bias_g) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_out.has_names() || input.has_names() || mean.has_names() || invstd.has_names()) {
        AT_ERROR("batch_norm_backward_reduce: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::batch_norm_backward_reduce_cuda(grad_out, input, mean, invstd, input_g, weight_g, bias_g);
}
Tensor CUDAType::batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_out.has_names() || input.has_names() || mean.has_names() || invstd.has_names() || weight.has_names() || mean_dy.has_names() || mean_dy_xmu.has_names()) {
        AT_ERROR("batch_norm_backward_elemt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::batch_norm_backward_elemt_cuda(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu);
}
std::tuple<Tensor,Tensor> CUDAType::batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("batch_norm_update_stats: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_update_stats_cuda(input, running_mean, running_var, momentum);
}
Tensor & CUDAType::randperm_out(Tensor & out, int64_t n, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("randperm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out_cuda(out, n, generator);
}
Tensor & CUDAType::range_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("range_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::range_cuda_out(out, start, end, step);
}
Tensor & CUDAType::reciprocal_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reciprocal__cuda(self);
}
Tensor & CUDAType::reciprocal_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reciprocal_out_cuda(out, self);
}
Tensor & CUDAType::neg_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_out(out, self);
}
Tensor CUDAType::repeat_interleave(const Tensor & repeats) {
#ifdef BUILD_NAMEDTENSOR
    if (repeats.has_names()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(repeats));
    return at::native::repeat_interleave_cuda(repeats);
}
Tensor & CUDAType::round_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round__cuda(self);
}
Tensor & CUDAType::round_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round_out_cuda(out, self);
}
Tensor CUDAType::relu(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu(self);
}
Tensor & CUDAType::relu_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu_(self);
}
Tensor CUDAType::prelu(const Tensor & self, const Tensor & weight) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names()) {
        AT_ERROR("prelu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_cuda(self, weight);
}
std::tuple<Tensor,Tensor> CUDAType::prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("prelu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_backward_cuda(grad_output, self, weight);
}
Tensor CUDAType::gelu(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("gelu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gelu_cuda(self);
}
Tensor CUDAType::gelu_backward(const Tensor & grad, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || self.has_names()) {
        AT_ERROR("gelu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gelu_backward_cuda(grad, self);
}
Tensor CUDAType::hardshrink(const Tensor & self, Scalar lambd) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("hardshrink: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_cuda(self, lambd);
}
Tensor CUDAType::hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_out.has_names() || self.has_names()) {
        AT_ERROR("hardshrink_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_backward_cuda(grad_out, self, lambd);
}
Tensor & CUDAType::rsqrt_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt__cuda(self);
}
Tensor & CUDAType::rsqrt_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt_out_cuda(out, self);
}
Tensor CUDAType::sigmoid(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid(self);
}
Tensor & CUDAType::sigmoid_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid__cuda(self);
}
Tensor & CUDAType::sigmoid_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid_out_cuda(out, self);
}
Tensor & CUDAType::sin_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin__cuda(self);
}
Tensor & CUDAType::sin_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin_out_cuda(out, self);
}
Tensor & CUDAType::sinh_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh__cuda(self);
}
Tensor & CUDAType::sinh_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh_out_cuda(out, self);
}
Tensor CUDAType::_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_cuda(self, dim, half_to_float);
}
Tensor CUDAType::_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names() || self.has_names()) {
        AT_ERROR("_softmax_backward_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_backward_cuda(grad_output, output, dim, self);
}
Tensor & CUDAType::_sparse_dense_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_sparse_dense_add_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out_dense_sparse_cuda(out, self, other, alpha);
}
Tensor & CUDAType::sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("sspaddmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sspaddmm_out_only_sparse_cuda(out, self, mat1, mat2, beta, alpha);
}
Tensor & CUDAType::sqrt_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt__cuda(self);
}
Tensor & CUDAType::sqrt_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt_out_cuda(out, self);
}
Tensor & CUDAType::tan_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan__cuda(self);
}
Tensor & CUDAType::tan_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan_out_cuda(out, self);
}
Tensor & CUDAType::tanh_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh__cuda(self);
}
Tensor & CUDAType::tanh_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh_out_cuda(out, self);
}
Tensor CUDAType::flip(const Tensor & self, IntArrayRef dims) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("flip: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flip_cuda(self, dims);
}
Tensor CUDAType::roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("roll: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::roll_cuda(self, shifts, dims);
}
Tensor & CUDAType::trunc_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc__cuda(self);
}
Tensor & CUDAType::trunc_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc_out_cuda(out, self);
}
std::tuple<Tensor,Tensor> CUDAType::_unique(const Tensor & self, bool sorted, bool return_inverse) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_unique: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique_cuda(self, sorted, return_inverse);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unique_dim: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_dim_cuda(self, dim, sorted, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unique_consecutive: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_consecutive_cuda(self, return_inverse, return_counts, dim);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unique_dim_consecutive: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_dim_consecutive_cuda(self, dim, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::_unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_unique2: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique2_cuda(self, sorted, return_inverse, return_counts);
}
Tensor CUDAType::_s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_s_where: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where_cuda(condition, self, other);
}
std::tuple<Tensor,Tensor> CUDAType::_weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (v.has_names() || g.has_names()) {
        AT_ERROR("_weight_norm_cuda_interface: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::weight_norm_cuda(v, g, dim);
}
std::tuple<Tensor,Tensor> CUDAType::_weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_w.has_names() || saved_v.has_names() || saved_g.has_names() || saved_norms.has_names()) {
        AT_ERROR("_weight_norm_cuda_interface_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::weight_norm_cuda_backward(grad_w, saved_v, saved_g, saved_norms, dim);
}
Tensor CUDAType::_standard_gamma_grad(const Tensor & self, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || output.has_names()) {
        AT_ERROR("_standard_gamma_grad: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_standard_gamma_grad_cuda(self, output);
}
Tensor CUDAType::_standard_gamma(const Tensor & self, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_standard_gamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_gamma_cuda(self, generator);
}
Tensor CUDAType::_dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) {
#ifdef BUILD_NAMEDTENSOR
    if (x.has_names() || alpha.has_names() || total.has_names()) {
        AT_ERROR("_dirichlet_grad: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x));
    return at::native::_dirichlet_grad_cuda(x, alpha, total);
}
Tensor CUDAType::_sample_dirichlet(const Tensor & self, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_sample_dirichlet: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_dirichlet_cuda(self, generator);
}
Tensor CUDAType::poisson(const Tensor & self, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("poisson: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_poisson_cuda(self, generator);
}
Tensor CUDAType::clone(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clone(self);
}
Tensor & CUDAType::resize_as_(Tensor & self, const Tensor & the_template) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || the_template.has_names()) {
        AT_ERROR("resize_as_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::resize_as_cuda_(self, the_template);
}
Tensor & CUDAType::pow_out(Tensor & out, const Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_pow_out(out, self, exponent);
}
Tensor CUDAType::pow(const Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_pow(self, exponent);
}
Tensor & CUDAType::zero_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_zero_(self);
}
Tensor & CUDAType::s_native_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("s_native_addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_out_sparse_dense_cuda(out, self, mat1, mat2, beta, alpha);
}
Tensor CUDAType::s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("s_native_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cuda(self, mat1, mat2, beta, alpha);
}
Tensor & CUDAType::s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("s_native_addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cuda_(self, mat1, mat2, beta, alpha);
}
Tensor CUDAType::sparse_mask(const Tensor & self, const Tensor & mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("sparse_mask: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_mask_cuda(self, mask);
}
Tensor CUDAType::to_sparse(const Tensor & self, int64_t sparse_dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("to_sparse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(self, sparse_dim);
}
Tensor CUDAType::to_sparse(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("to_sparse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(self);
}
Tensor CUDAType::fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fake_quantize_per_tensor_affine: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_tensor_affine_cuda(self, scale, zero_point, quant_min, quant_max);
}
Tensor CUDAType::fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
#ifdef BUILD_NAMEDTENSOR
    if (grad.has_names() || self.has_names()) {
        AT_ERROR("fake_quantize_per_tensor_affine_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_tensor_affine_backward_cuda(grad, self, scale, zero_point, quant_min, quant_max);
}
Scalar CUDAType::_local_scalar_dense(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_local_scalar_dense_cuda(self);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::_thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input_gates.has_names() || hidden_gates.has_names() || cx.has_names() || input_bias.has_names() || hidden_bias.has_names()) {
        AT_ERROR("_thnn_fused_lstm_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_fused_lstm_cell_cuda(input_gates, hidden_gates, cx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAType::_thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_hy.has_names() || grad_cy.has_names() || cx.has_names() || cy.has_names() || workspace.has_names()) {
        AT_ERROR("_thnn_fused_lstm_cell_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(cx));
    return at::native::_thnn_fused_lstm_cell_backward_cuda(grad_hy, grad_cy, cx, cy, workspace, has_bias);
}
std::tuple<Tensor,Tensor> CUDAType::_thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {
#ifdef BUILD_NAMEDTENSOR
    if (input_gates.has_names() || hidden_gates.has_names() || hx.has_names() || input_bias.has_names() || hidden_bias.has_names()) {
        AT_ERROR("_thnn_fused_gru_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_fused_gru_cell_cuda(input_gates, hidden_gates, hx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAType::_thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_hy.has_names() || workspace.has_names()) {
        AT_ERROR("_thnn_fused_gru_cell_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_hy));
    return at::native::_thnn_fused_gru_cell_backward_cuda(grad_hy, workspace, has_bias);
}
Tensor & CUDAType::set_(Tensor & self, Storage source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cuda::_th_set_(self, source);
}
Tensor & CUDAType::set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cuda::_th_set_(self, source, storage_offset, size, stride);
}
Tensor & CUDAType::set_(Tensor & self, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || source.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cuda::_th_set_(self, source);
}
Tensor & CUDAType::set_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_set_(self);
}
bool CUDAType::is_set_to(const Tensor & self, const Tensor & tensor) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor.has_names()) {
        AT_ERROR("is_set_to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cuda::_th_is_set_to(self, tensor);
}
Tensor & CUDAType::masked_fill_(Tensor & self, const Tensor & mask, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("masked_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__cuda(self, mask, value);
}
Tensor & CUDAType::masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names() || value.has_names()) {
        AT_ERROR("masked_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__cuda(self, mask, value);
}
Tensor & CUDAType::masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names() || source.has_names()) {
        AT_ERROR("masked_scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter__cuda(self, mask, source);
}
Tensor CUDAType::view(const Tensor & self, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("view: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::view(self, size);
}
Tensor & CUDAType::put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("put_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_put_(self, index, source, accumulate);
}
Tensor & CUDAType::index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_index_add_(self, dim, index, source);
}
Tensor & CUDAType::index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_index_fill_(self, dim, index, value);
}
Tensor & CUDAType::index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || value.has_names()) {
        AT_ERROR("index_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_index_fill_(self, dim, index, value);
}
Tensor & CUDAType::scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_scatter_(self, dim, index, src);
}
Tensor & CUDAType::scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_scatter_(self, dim, index, value);
}
Tensor & CUDAType::scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_scatter_add_(self, dim, index, src);
}
Tensor & CUDAType::lt_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("lt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lt_(self, other);
}
Tensor & CUDAType::lt_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("lt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lt_(self, other);
}
Tensor & CUDAType::gt_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("gt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_gt_(self, other);
}
Tensor & CUDAType::gt_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("gt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_gt_(self, other);
}
Tensor & CUDAType::le_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("le_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_le_(self, other);
}
Tensor & CUDAType::le_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("le_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_le_(self, other);
}
Tensor & CUDAType::ge_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ge_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ge_(self, other);
}
Tensor & CUDAType::ge_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ge_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ge_(self, other);
}
Tensor & CUDAType::eq_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("eq_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_eq_(self, other);
}
Tensor & CUDAType::eq_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("eq_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_eq_(self, other);
}
Tensor & CUDAType::ne_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ne_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ne_(self, other);
}
Tensor & CUDAType::ne_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ne_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ne_(self, other);
}
Tensor CUDAType::__and__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__and__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_and(self, other);
}
Tensor CUDAType::__and__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__and__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_and(self, other);
}
Tensor & CUDAType::__iand__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__iand__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_iand_(self, other);
}
Tensor & CUDAType::__iand__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__iand__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_iand_(self, other);
}
Tensor CUDAType::__or__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__or__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_or(self, other);
}
Tensor CUDAType::__or__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__or__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_or(self, other);
}
Tensor & CUDAType::__ior__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__ior__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ior_(self, other);
}
Tensor & CUDAType::__ior__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ior__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ior_(self, other);
}
Tensor CUDAType::__xor__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__xor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_xor(self, other);
}
Tensor CUDAType::__xor__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__xor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_xor(self, other);
}
Tensor & CUDAType::__ixor__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__ixor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ixor_(self, other);
}
Tensor & CUDAType::__ixor__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ixor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ixor_(self, other);
}
Tensor CUDAType::__lshift__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__lshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lshift(self, other);
}
Tensor CUDAType::__lshift__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__lshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lshift(self, other);
}
Tensor & CUDAType::__ilshift__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__ilshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ilshift_(self, other);
}
Tensor & CUDAType::__ilshift__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ilshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ilshift_(self, other);
}
Tensor CUDAType::__rshift__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__rshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_rshift(self, other);
}
Tensor CUDAType::__rshift__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__rshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_rshift(self, other);
}
Tensor & CUDAType::__irshift__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__irshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_irshift_(self, other);
}
Tensor & CUDAType::__irshift__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__irshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_irshift_(self, other);
}
Tensor & CUDAType::lgamma_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lgamma_(self);
}
Tensor & CUDAType::tril_(Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("tril_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cuda_(self, diagonal);
}
Tensor & CUDAType::triu_(Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("triu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cuda_(self, diagonal);
}
Tensor & CUDAType::digamma_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_digamma_(self);
}
Tensor & CUDAType::polygamma_(Tensor & self, int64_t n) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_polygamma_(self, n);
}
Tensor & CUDAType::erfinv_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_erfinv_(self);
}
Tensor & CUDAType::renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("renorm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_renorm_(self, p, dim, maxnorm);
}
Tensor & CUDAType::pow_(Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pow_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_pow_(self, exponent);
}
Tensor & CUDAType::pow_(Tensor & self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || exponent.has_names()) {
        AT_ERROR("pow_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_pow_(self, exponent);
}
Tensor & CUDAType::lerp_(Tensor & self, const Tensor & end, Scalar weight) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || end.has_names()) {
        AT_ERROR("lerp_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cuda_scalar_(self, end, weight);
}
Tensor & CUDAType::lerp_(Tensor & self, const Tensor & end, const Tensor & weight) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || end.has_names() || weight.has_names()) {
        AT_ERROR("lerp_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cuda_tensor_(self, end, weight);
}
Tensor & CUDAType::sign_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_sign_(self);
}
Tensor & CUDAType::fmod_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fmod_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_fmod_(self, other);
}
Tensor & CUDAType::fmod_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("fmod_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_fmod_(self, other);
}
Tensor & CUDAType::remainder_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("remainder_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_remainder_(self, other);
}
Tensor & CUDAType::remainder_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("remainder_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_remainder_(self, other);
}
Tensor & CUDAType::addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addbmm_(self, batch1, batch2, beta, alpha);
}
Tensor & CUDAType::addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addbmm_out(out, self, batch1, batch2, beta, alpha);
}
Tensor CUDAType::addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addbmm(self, batch1, batch2, beta, alpha);
}
Tensor & CUDAType::random_(Tensor & self, int64_t from, int64_t to, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamped_random_cuda_(self, from, to, generator);
}
Tensor & CUDAType::random_(Tensor & self, int64_t to, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::capped_random_cuda_(self, to, generator);
}
Tensor & CUDAType::random_(Tensor & self, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_cuda_(self, generator);
}
Tensor & CUDAType::uniform_(Tensor & self, double from, double to, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::uniform_cuda_(self, from, to, generator);
}
Tensor & CUDAType::normal_(Tensor & self, double mean, double std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::normal_cuda_(self, mean, std, generator);
}
Tensor & CUDAType::cauchy_(Tensor & self, double median, double sigma, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cauchy_cuda_(self, median, sigma, generator);
}
Tensor & CUDAType::log_normal_(Tensor & self, double mean, double std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_normal_cuda_(self, mean, std, generator);
}
Tensor & CUDAType::exponential_(Tensor & self, double lambd, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exponential_cuda_(self, lambd, generator);
}
Tensor & CUDAType::geometric_(Tensor & self, double p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::geometric_cuda_(self, p, generator);
}
Tensor & CUDAType::diag_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("diag_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_diag_out(out, self, diagonal);
}
Tensor CUDAType::diag(const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("diag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_diag(self, diagonal);
}
Tensor & CUDAType::triu_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("triu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cuda_out(out, self, diagonal);
}
Tensor & CUDAType::tril_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("tril_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cuda_out(out, self, diagonal);
}
Tensor CUDAType::tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::tril_indices_cuda(row, col, offset, options);
}
Tensor CUDAType::triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::triu_indices_cuda(row, col, offset, options);
}
Tensor CUDAType::trace(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("trace: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_trace(self);
}
Tensor & CUDAType::ne_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("ne_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_scalar_out_cuda(out, self, other);
}
Tensor CUDAType::ne(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ne: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ne(self, other);
}
Tensor & CUDAType::ne_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("ne_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_out_cuda(out, self, other);
}
Tensor CUDAType::ne(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ne: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ne(self, other);
}
Tensor & CUDAType::eq_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("eq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_scalar_out_cuda(out, self, other);
}
Tensor CUDAType::eq(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("eq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_eq(self, other);
}
Tensor & CUDAType::eq_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("eq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_out_cuda(out, self, other);
}
Tensor CUDAType::eq(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("eq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_eq(self, other);
}
Tensor & CUDAType::ge_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("ge_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_scalar_out_cuda(out, self, other);
}
Tensor CUDAType::ge(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ge: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ge(self, other);
}
Tensor & CUDAType::ge_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("ge_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_out_cuda(out, self, other);
}
Tensor CUDAType::ge(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ge: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_ge(self, other);
}
Tensor & CUDAType::le_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("le_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_scalar_out_cuda(out, self, other);
}
Tensor CUDAType::le(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("le: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_le(self, other);
}
Tensor & CUDAType::le_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("le_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_out_cuda(out, self, other);
}
Tensor CUDAType::le(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("le: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_le(self, other);
}
Tensor & CUDAType::gt_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("gt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_scalar_out_cuda(out, self, other);
}
Tensor CUDAType::gt(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("gt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_gt(self, other);
}
Tensor & CUDAType::gt_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("gt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_out_cuda(out, self, other);
}
Tensor CUDAType::gt(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("gt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_gt(self, other);
}
Tensor & CUDAType::lt_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("lt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_scalar_out_cuda(out, self, other);
}
Tensor CUDAType::lt(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("lt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lt(self, other);
}
Tensor & CUDAType::lt_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("lt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_out_cuda(out, self, other);
}
Tensor CUDAType::lt(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("lt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lt(self, other);
}
Tensor & CUDAType::take_out(Tensor & out, const Tensor & self, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("take_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_take_out(out, self, index);
}
Tensor CUDAType::take(const Tensor & self, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("take: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_take(self, index);
}
Tensor & CUDAType::index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("index_select_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_index_select_out(out, self, dim, index);
}
Tensor CUDAType::index_select(const Tensor & self, int64_t dim, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_select: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_index_select(self, dim, index);
}
Tensor & CUDAType::masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mask.has_names()) {
        AT_ERROR("masked_select_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_out_cuda(out, self, mask);
}
Tensor CUDAType::masked_select(const Tensor & self, const Tensor & mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("masked_select: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_cuda(self, mask);
}
Tensor & CUDAType::nonzero_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nonzero_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_nonzero_out(out, self);
}
Tensor CUDAType::nonzero(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("nonzero: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_nonzero(self);
}
Tensor & CUDAType::gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("gather_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out_cuda(out, self, dim, index, sparse_grad);
}
Tensor CUDAType::gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("gather: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_cuda(self, dim, index, sparse_grad);
}
std::tuple<Tensor &,Tensor &> CUDAType::lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) {
#ifdef BUILD_NAMEDTENSOR
    if (X.has_names() || qr.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR("lstsq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_gels_out(X, qr, self, A);
}
std::tuple<Tensor,Tensor> CUDAType::lstsq(const Tensor & self, const Tensor & A) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || A.has_names()) {
        AT_ERROR("lstsq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_gels(self, A);
}
std::tuple<Tensor,Tensor> CUDAType::_triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || A.has_names()) {
        AT_ERROR("_triangular_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_triangular_solve_helper_cuda(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> CUDAType::_symeig_helper(const Tensor & self, bool eigenvectors, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_symeig_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_symeig_helper_cuda(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &> CUDAType::eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) {
#ifdef BUILD_NAMEDTENSOR
    if (e.has_names() || v.has_names() || self.has_names()) {
        AT_ERROR("eig_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_eig_out(e, v, self, eigenvectors);
}
std::tuple<Tensor,Tensor> CUDAType::eig(const Tensor & self, bool eigenvectors) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("eig: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_eig(self, eigenvectors);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::_svd_helper(const Tensor & self, bool some, bool compute_uv) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_svd_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_svd_helper_cuda(self, some, compute_uv);
}
Tensor CUDAType::_cholesky_helper(const Tensor & self, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cholesky_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_helper_cuda(self, upper);
}
Tensor CUDAType::_cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || A.has_names()) {
        AT_ERROR("_cholesky_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_solve_helper_cuda(self, A, upper);
}
std::tuple<Tensor,Tensor> CUDAType::_solve_helper(const Tensor & self, const Tensor & A) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || A.has_names()) {
        AT_ERROR("_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_solve_helper_cuda(self, A);
}
Tensor & CUDAType::cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("cholesky_inverse_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_potri_out(out, self, upper);
}
Tensor CUDAType::cholesky_inverse(const Tensor & self, bool upper) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("cholesky_inverse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_potri(self, upper);
}
std::tuple<Tensor,Tensor> CUDAType::_qr_helper(const Tensor & self, bool some) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_qr_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_qr_helper_cuda(self, some);
}
std::tuple<Tensor &,Tensor &> CUDAType::geqrf_out(Tensor & a, Tensor & tau, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (a.has_names() || tau.has_names() || self.has_names()) {
        AT_ERROR("geqrf_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_geqrf_out(a, tau, self);
}
std::tuple<Tensor,Tensor> CUDAType::geqrf(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("geqrf: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_geqrf(self);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::_lu_with_info(const Tensor & self, bool pivot, bool check_errors) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_lu_with_info: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lu_with_info_cuda(self, pivot, check_errors);
}
Tensor CUDAType::_lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR("_lu_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lu_solve_helper_cuda(self, LU_data, LU_pivots);
}
Tensor & CUDAType::multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("multinomial_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_multinomial_out(out, self, num_samples, replacement, generator);
}
Tensor CUDAType::multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("multinomial: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_multinomial(self, num_samples, replacement, generator);
}
std::tuple<Tensor,Tensor> CUDAType::_multinomial_alias_setup(const Tensor & probs) {
#ifdef BUILD_NAMEDTENSOR
    if (probs.has_names()) {
        AT_ERROR("_multinomial_alias_setup: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(probs));
    return at::native::legacy::cuda::_th_multinomial_alias_setup(probs);
}
Tensor CUDAType::_multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (J.has_names() || q.has_names()) {
        AT_ERROR("_multinomial_alias_draw: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(J));
    return at::native::legacy::cuda::_th_multinomial_alias_draw(J, q, num_samples, generator);
}
Tensor & CUDAType::lgamma_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lgamma_out(out, self);
}
Tensor CUDAType::lgamma(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_lgamma(self);
}
Tensor & CUDAType::digamma_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_digamma_out(out, self);
}
Tensor CUDAType::digamma(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_digamma(self);
}
Tensor & CUDAType::polygamma_out(Tensor & out, int64_t n, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_polygamma_out(out, n, self);
}
Tensor CUDAType::polygamma(int64_t n, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_polygamma(n, self);
}
Tensor & CUDAType::erfinv_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_erfinv_out(out, self);
}
Tensor CUDAType::erfinv(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_erfinv(self);
}
Tensor CUDAType::dist(const Tensor & self, const Tensor & other, Scalar p) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("dist: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_dist(self, other, p);
}
Tensor & CUDAType::lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || end.has_names()) {
        AT_ERROR("lerp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cuda_scalar_out(out, self, end, weight);
}
Tensor & CUDAType::lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || end.has_names() || weight.has_names()) {
        AT_ERROR("lerp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cuda_tensor_out(out, self, end, weight);
}
Tensor CUDAType::lerp(const Tensor & self, const Tensor & end, Scalar weight) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || end.has_names()) {
        AT_ERROR("lerp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cuda_scalar(self, end, weight);
}
Tensor CUDAType::lerp(const Tensor & self, const Tensor & end, const Tensor & weight) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || end.has_names() || weight.has_names()) {
        AT_ERROR("lerp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cuda_tensor(self, end, weight);
}
Tensor & CUDAType::histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("histc_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_histc_out_cuda(out, self, bins, min, max);
}
Tensor CUDAType::histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("histc: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_histc_cuda(self, bins, min, max);
}
Tensor & CUDAType::sign_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_sign_out(out, self);
}
Tensor CUDAType::sign(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_sign(self);
}
Tensor & CUDAType::fmod_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("fmod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_fmod_out(out, self, other);
}
Tensor CUDAType::fmod(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fmod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_fmod(self, other);
}
Tensor & CUDAType::fmod_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("fmod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_fmod_out(out, self, other);
}
Tensor CUDAType::fmod(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("fmod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_fmod(self, other);
}
Tensor & CUDAType::remainder_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("remainder_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_remainder_out(out, self, other);
}
Tensor CUDAType::remainder(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("remainder: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_remainder(self, other);
}
Tensor & CUDAType::remainder_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("remainder_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_remainder_out(out, self, other);
}
Tensor CUDAType::remainder(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("remainder: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_remainder(self, other);
}
Tensor & CUDAType::min_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_min_out(out, self, other);
}
Tensor CUDAType::min(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_min(self, other);
}
Tensor CUDAType::min(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_min(self);
}
Tensor & CUDAType::max_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_max_out(out, self, other);
}
Tensor CUDAType::max(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_max(self, other);
}
Tensor CUDAType::max(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_max(self);
}
Tensor CUDAType::median(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("median: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_cuda(self);
}
std::tuple<Tensor &,Tensor &> CUDAType::sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("sort_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> CUDAType::sort(const Tensor & self, int64_t dim, bool descending) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("sort: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_sort(self, dim, descending);
}
std::tuple<Tensor &,Tensor &> CUDAType::topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("topk_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_topk_out(values, indices, self, k, dim, largest, sorted);
}
Tensor & CUDAType::renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("renorm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_renorm_out(out, self, p, dim, maxnorm);
}
Tensor CUDAType::renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("renorm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_renorm(self, p, dim, maxnorm);
}
Tensor CUDAType::unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unfold: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_unfold(self, dimension, size, step);
}
bool CUDAType::equal(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("equal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_equal(self, other);
}
Tensor & CUDAType::pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || exponent.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_pow_out(out, self, exponent);
}
Tensor CUDAType::pow(const Tensor & self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || exponent.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_pow(self, exponent);
}
Tensor & CUDAType::pow_out(Tensor & out, Scalar self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || exponent.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cuda::_th_pow_out(out, self, exponent);
}
Tensor CUDAType::pow(Scalar self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (exponent.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(exponent));
    return at::native::legacy::cuda::_th_pow(self, exponent);
}
Tensor & CUDAType::normal_out(Tensor & out, const Tensor & mean, double std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || mean.has_names()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out_cuda(out, mean, std, generator);
}
Tensor CUDAType::normal(const Tensor & mean, double std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (mean.has_names()) {
        AT_ERROR("normal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::normal_cuda(mean, std, generator);
}
Tensor & CUDAType::normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || std.has_names()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out_cuda(out, mean, std, generator);
}
Tensor CUDAType::normal(double mean, const Tensor & std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (std.has_names()) {
        AT_ERROR("normal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(std));
    return at::native::normal_cuda(mean, std, generator);
}
Tensor & CUDAType::normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || mean.has_names() || std.has_names()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out_cuda(out, mean, std, generator);
}
Tensor CUDAType::normal(const Tensor & mean, const Tensor & std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (mean.has_names() || std.has_names()) {
        AT_ERROR("normal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::normal_cuda(mean, std, generator);
}
Tensor CUDAType::_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addr(self, vec1, vec2, beta, alpha);
}
Tensor & CUDAType::_addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addr_(self, vec1, vec2, beta, alpha);
}
Tensor & CUDAType::_addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor & CUDAType::_index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("_index_copy_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_index_copy_(self, dim, index, source);
}
Tensor CUDAType::_cumsum(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cumsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_cumsum(self, dim);
}
Tensor & CUDAType::_cumsum_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_cumsum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_cumsum_out(out, self, dim);
}
Tensor CUDAType::_cumprod(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cumprod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_cumprod(self, dim);
}
Tensor & CUDAType::_cumprod_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_cumprod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_cumprod_out(out, self, dim);
}
Tensor CUDAType::_var(const Tensor & self, bool unbiased) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_var: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_var(self, unbiased);
}
Tensor CUDAType::_std(const Tensor & self, bool unbiased) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_std: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_std(self, unbiased);
}
Tensor & CUDAType::_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("_addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addmm_out(out, self, mat1, mat2, beta, alpha);
}
Tensor CUDAType::_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addmm(self, mat1, mat2, beta, alpha);
}
Tensor & CUDAType::_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("_addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_addmm_(self, mat1, mat2, beta, alpha);
}
Tensor CUDAType::_cat(TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("_cat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::legacy::cuda::_th_cat(tensors, dim);
}
Tensor & CUDAType::_cat_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR("_cat_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cuda::_th_cat_out(out, tensors, dim);
}
std::tuple<Tensor,Tensor> CUDAType::_mode(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_mode: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> CUDAType::_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("_mode_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_mode_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> CUDAType::_max(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> CUDAType::_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (max.has_names() || max_indices.has_names() || self.has_names()) {
        AT_ERROR("_max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_max_out(max, max_indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> CUDAType::_min(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> CUDAType::_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (min.has_names() || min_indices.has_names() || self.has_names()) {
        AT_ERROR("_min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_th_min_out(min, min_indices, self, dim, keepdim);
}
Tensor & CUDAType::binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_binary_cross_entropy_forward_out(out, self, target, weight, reduction);
}
Tensor CUDAType::binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_binary_cross_entropy_forward(self, target, weight, reduction);
}
Tensor & CUDAType::binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_binary_cross_entropy_backward_out(grad_input, grad_output, self, target, weight, reduction);
}
Tensor CUDAType::binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_binary_cross_entropy_backward(grad_output, self, target, weight, reduction);
}
Tensor & CUDAType::mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_mse_loss_forward_out(out, self, target, reduction);
}
Tensor CUDAType::mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_mse_loss_forward(self, target, reduction);
}
Tensor & CUDAType::mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_mse_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor CUDAType::mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_mse_loss_backward(grad_output, self, target, reduction);
}
Tensor & CUDAType::l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_l1_loss_forward_out(out, self, target, reduction);
}
Tensor CUDAType::l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_l1_loss_forward(self, target, reduction);
}
Tensor & CUDAType::l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_l1_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor CUDAType::l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & CUDAType::multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multi_margin_loss_forward_out(out, self, target, p, margin, weight, reduction);
}
Tensor CUDAType::multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multi_margin_loss_forward(self, target, p, margin, weight, reduction);
}
Tensor & CUDAType::multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multi_margin_loss_backward_out(grad_input, grad_output, self, target, p, margin, weight, reduction);
}
Tensor CUDAType::multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multi_margin_loss_backward(grad_output, self, target, p, margin, weight, reduction);
}
std::tuple<Tensor &,Tensor &> CUDAType::multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || is_target.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multilabel_margin_loss_forward_out(output, is_target, self, target, reduction);
}
std::tuple<Tensor,Tensor> CUDAType::multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multilabel_margin_loss_forward(self, target, reduction);
}
Tensor & CUDAType::multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || is_target.has_names()) {
        AT_ERROR("multilabel_margin_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multilabel_margin_loss_backward_out(grad_input, grad_output, self, target, reduction, is_target);
}
Tensor CUDAType::multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || is_target.has_names()) {
        AT_ERROR("multilabel_margin_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_multilabel_margin_loss_backward(grad_output, self, target, reduction, is_target);
}
std::tuple<Tensor &,Tensor &> CUDAType::nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || total_weight.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss_forward_out(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> CUDAType::nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss_forward(self, target, weight, reduction, ignore_index);
}
Tensor & CUDAType::nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss_backward_out(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor CUDAType::nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
std::tuple<Tensor &,Tensor &> CUDAType::nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || total_weight.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss2d_forward_out(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> CUDAType::nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss2d_forward(self, target, weight, reduction, ignore_index);
}
Tensor & CUDAType::nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss2d_backward_out(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor CUDAType::nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_nll_loss2d_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor & CUDAType::smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_smooth_l1_loss_forward_out(out, self, target, reduction);
}
Tensor CUDAType::smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_smooth_l1_loss_forward(self, target, reduction);
}
Tensor & CUDAType::smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_smooth_l1_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor CUDAType::smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_smooth_l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & CUDAType::soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_soft_margin_loss_forward_out(out, self, target, reduction);
}
Tensor CUDAType::soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_soft_margin_loss_forward(self, target, reduction);
}
Tensor & CUDAType::soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_soft_margin_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor CUDAType::soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_soft_margin_loss_backward(grad_output, self, target, reduction);
}
Tensor & CUDAType::elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("elu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_elu_forward_out(out, self, alpha, scale, input_scale);
}
Tensor CUDAType::elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("elu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_elu_forward(self, alpha, scale, input_scale);
}
Tensor & CUDAType::elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("elu_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::legacy::cuda::_thnn_elu_backward_out(grad_input, grad_output, alpha, scale, input_scale, output);
}
Tensor CUDAType::elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("elu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cuda::_thnn_elu_backward(grad_output, alpha, scale, input_scale, output);
}
Tensor & CUDAType::elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("elu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_elu_forward_(self, alpha, scale, input_scale);
}
Tensor & CUDAType::glu_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("glu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_glu_forward_out(out, self, dim);
}
Tensor CUDAType::glu(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("glu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_glu_forward(self, dim);
}
Tensor & CUDAType::glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("glu_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_glu_backward_out(grad_input, grad_output, self, dim);
}
Tensor CUDAType::glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("glu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_glu_backward(grad_output, self, dim);
}
Tensor & CUDAType::hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("hardtanh_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_hardtanh_forward_out(out, self, min_val, max_val);
}
Tensor CUDAType::hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("hardtanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_hardtanh_forward(self, min_val, max_val);
}
Tensor & CUDAType::hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("hardtanh_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_hardtanh_backward_out(grad_input, grad_output, self, min_val, max_val);
}
Tensor CUDAType::hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("hardtanh_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_hardtanh_backward(grad_output, self, min_val, max_val);
}
Tensor & CUDAType::hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("hardtanh_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_hardtanh_forward_(self, min_val, max_val);
}
Tensor & CUDAType::leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("leaky_relu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_leaky_relu_forward_out(out, self, negative_slope);
}
Tensor CUDAType::leaky_relu(const Tensor & self, Scalar negative_slope) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("leaky_relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_leaky_relu_forward(self, negative_slope);
}
Tensor & CUDAType::leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("leaky_relu_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_leaky_relu_backward_out(grad_input, grad_output, self, negative_slope);
}
Tensor CUDAType::leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("leaky_relu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_leaky_relu_backward(grad_output, self, negative_slope);
}
Tensor & CUDAType::leaky_relu_(Tensor & self, Scalar negative_slope) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("leaky_relu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_leaky_relu_forward_(self, negative_slope);
}
std::tuple<Tensor &,Tensor &> CUDAType::log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || buffer.has_names() || self.has_names()) {
        AT_ERROR("log_sigmoid_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_log_sigmoid_forward_out(output, buffer, self);
}
std::tuple<Tensor,Tensor> CUDAType::log_sigmoid_forward(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("log_sigmoid_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_log_sigmoid_forward(self);
}
Tensor & CUDAType::log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || buffer.has_names()) {
        AT_ERROR("log_sigmoid_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_log_sigmoid_backward_out(grad_input, grad_output, self, buffer);
}
Tensor CUDAType::log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || buffer.has_names()) {
        AT_ERROR("log_sigmoid_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_log_sigmoid_backward(grad_output, self, buffer);
}
Tensor & CUDAType::rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_rrelu_with_noise_forward_out(out, self, noise, lower, upper, training, generator);
}
Tensor CUDAType::rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_rrelu_with_noise_forward(self, noise, lower, upper, training, generator);
}
Tensor & CUDAType::rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_rrelu_with_noise_backward_out(grad_input, grad_output, self, noise, lower, upper, training);
}
Tensor CUDAType::rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_rrelu_with_noise_backward(grad_output, self, noise, lower, upper, training);
}
Tensor & CUDAType::rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_rrelu_with_noise_forward_(self, noise, lower, upper, training, generator);
}
Tensor & CUDAType::softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("softplus_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softplus_forward_out(out, self, beta, threshold);
}
Tensor CUDAType::softplus(const Tensor & self, Scalar beta, Scalar threshold) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("softplus: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softplus_forward(self, beta, threshold);
}
Tensor & CUDAType::softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || output.has_names()) {
        AT_ERROR("softplus_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softplus_backward_out(grad_input, grad_output, self, beta, threshold, output);
}
Tensor CUDAType::softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || output.has_names()) {
        AT_ERROR("softplus_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softplus_backward(grad_output, self, beta, threshold, output);
}
Tensor & CUDAType::softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("softshrink_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softshrink_forward_out(out, self, lambd);
}
Tensor CUDAType::softshrink(const Tensor & self, Scalar lambd) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("softshrink: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softshrink_forward(self, lambd);
}
Tensor & CUDAType::softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("softshrink_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softshrink_backward_out(grad_input, grad_output, self, lambd);
}
Tensor CUDAType::softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("softshrink_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_softshrink_backward(grad_output, self, lambd);
}
Tensor & CUDAType::adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_out_cuda(out, self, output_size);
}
Tensor CUDAType::_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_adaptive_avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_cuda(self, output_size);
}
Tensor CUDAType::_adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("_adaptive_avg_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_backward_cuda(grad_output, self);
}
Tensor & CUDAType::adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_out_cuda(out, self, output_size);
}
Tensor CUDAType::adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_cuda(self, output_size);
}
Tensor & CUDAType::adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_backward_out_cuda(grad_input, grad_output, self);
}
Tensor CUDAType::adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_backward_cuda(grad_output, self);
}
std::tuple<Tensor &,Tensor &> CUDAType::adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("adaptive_max_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_out_cuda(out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> CUDAType::adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("adaptive_max_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_cuda(self, output_size);
}
Tensor & CUDAType::adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_backward_out_cuda(grad_input, grad_output, self, indices);
}
Tensor CUDAType::adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_backward_cuda(grad_output, self, indices);
}
std::tuple<Tensor &,Tensor &> CUDAType::adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("adaptive_max_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_out_cuda(out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> CUDAType::adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("adaptive_max_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_cuda(self, output_size);
}
Tensor & CUDAType::adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_backward_out_cuda(grad_input, grad_output, self, indices);
}
Tensor CUDAType::adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_backward_cuda(grad_output, self, indices);
}
Tensor & CUDAType::avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_out_cuda(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor CUDAType::avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_cuda(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & CUDAType::avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_backward_out_cuda(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor CUDAType::avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_backward_cuda(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & CUDAType::avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("avg_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_out_cuda(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor CUDAType::avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("avg_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_cuda(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & CUDAType::avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_backward_out_cuda(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor CUDAType::avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_backward_cuda(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
std::tuple<Tensor &,Tensor &> CUDAType::fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || indices.has_names() || self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_out_cuda(output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> CUDAType::fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_cuda(self, kernel_size, output_size, random_samples);
}
Tensor & CUDAType::fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_out_cuda(grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor CUDAType::fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_cuda(grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> CUDAType::fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || indices.has_names() || self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_out_cuda(output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> CUDAType::fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_cuda(self, kernel_size, output_size, random_samples);
}
Tensor & CUDAType::fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_out_cuda(grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor CUDAType::fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_cuda(grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> CUDAType::max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("max_pool2d_with_indices_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_out_cuda(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> CUDAType::max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool2d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_cuda(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & CUDAType::max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool2d_with_indices_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_out_cuda(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor CUDAType::max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool2d_with_indices_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_cuda(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
std::tuple<Tensor &,Tensor &> CUDAType::max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("max_pool3d_with_indices_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_out_cuda(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> CUDAType::max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool3d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_cuda(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & CUDAType::max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool3d_with_indices_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_backward_out_cuda(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor CUDAType::max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool3d_with_indices_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_backward_cuda(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor & CUDAType::max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_forward_out_cuda(out, self, indices, output_size);
}
Tensor CUDAType::max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_forward_cuda(self, indices, output_size);
}
Tensor & CUDAType::max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_backward_out_cuda(grad_input, grad_output, self, indices, output_size);
}
Tensor CUDAType::max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_backward_cuda(grad_output, self, indices, output_size);
}
Tensor & CUDAType::max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_forward_out_cuda(out, self, indices, output_size, stride, padding);
}
Tensor CUDAType::max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_forward_cuda(self, indices, output_size, stride, padding);
}
Tensor & CUDAType::max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_backward_out_cuda(grad_input, grad_output, self, indices, output_size, stride, padding);
}
Tensor CUDAType::max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_backward_cuda(grad_output, self, indices, output_size, stride, padding);
}
Tensor & CUDAType::reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_out_cuda(out, self, padding);
}
Tensor CUDAType::reflection_pad1d(const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("reflection_pad1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_cuda(self, padding);
}
Tensor & CUDAType::reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_out_cuda(grad_input, grad_output, self, padding);
}
Tensor CUDAType::reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_cuda(grad_output, self, padding);
}
Tensor & CUDAType::reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_out_cuda(out, self, padding);
}
Tensor CUDAType::reflection_pad2d(const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("reflection_pad2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_cuda(self, padding);
}
Tensor & CUDAType::reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_out_cuda(grad_input, grad_output, self, padding);
}
Tensor CUDAType::reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_cuda(grad_output, self, padding);
}
Tensor & CUDAType::replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("replication_pad1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_out_cuda(out, self, padding);
}
Tensor CUDAType::replication_pad1d(const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("replication_pad1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_cuda(self, padding);
}
Tensor & CUDAType::replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_out_cuda(grad_input, grad_output, self, padding);
}
Tensor CUDAType::replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_cuda(grad_output, self, padding);
}
Tensor & CUDAType::replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("replication_pad2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_out_cuda(out, self, padding);
}
Tensor CUDAType::replication_pad2d(const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("replication_pad2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_cuda(self, padding);
}
Tensor & CUDAType::replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_out_cuda(grad_input, grad_output, self, padding);
}
Tensor CUDAType::replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_cuda(grad_output, self, padding);
}
Tensor & CUDAType::replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("replication_pad3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_out_cuda(out, self, padding);
}
Tensor CUDAType::replication_pad3d(const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("replication_pad3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_cuda(self, padding);
}
Tensor & CUDAType::replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_out_cuda(grad_input, grad_output, self, padding);
}
Tensor CUDAType::replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_cuda(grad_output, self, padding);
}
Tensor & CUDAType::upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_linear1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_linear1d_out_cuda(out, self, output_size, align_corners);
}
Tensor CUDAType::upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_linear1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_linear1d_cuda(self, output_size, align_corners);
}
Tensor & CUDAType::upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_linear1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_linear1d_backward_out_cuda(grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor CUDAType::upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_linear1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_linear1d_backward_cuda(grad_output, output_size, input_size, align_corners);
}
Tensor & CUDAType::upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_bilinear2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bilinear2d_out_cuda(out, self, output_size, align_corners);
}
Tensor CUDAType::upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_bilinear2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bilinear2d_cuda(self, output_size, align_corners);
}
Tensor & CUDAType::upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_bilinear2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_bilinear2d_backward_out_cuda(grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor CUDAType::upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_bilinear2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_bilinear2d_backward_cuda(grad_output, output_size, input_size, align_corners);
}
Tensor & CUDAType::upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_bicubic2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bicubic2d_out_cuda(out, self, output_size, align_corners);
}
Tensor CUDAType::upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_bicubic2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bicubic2d_cuda(self, output_size, align_corners);
}
Tensor & CUDAType::upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_bicubic2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_bicubic2d_backward_out_cuda(grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor CUDAType::upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_bicubic2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_bicubic2d_backward_cuda(grad_output, output_size, input_size, align_corners);
}
Tensor & CUDAType::upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_trilinear3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_trilinear3d_out_cuda(out, self, output_size, align_corners);
}
Tensor CUDAType::upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_trilinear3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_trilinear3d_cuda(self, output_size, align_corners);
}
Tensor & CUDAType::upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_trilinear3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_trilinear3d_backward_out_cuda(grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor CUDAType::upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_trilinear3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_trilinear3d_backward_cuda(grad_output, output_size, input_size, align_corners);
}
Tensor & CUDAType::upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest1d_out_cuda(out, self, output_size);
}
Tensor CUDAType::upsample_nearest1d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_nearest1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest1d_cuda(self, output_size);
}
Tensor & CUDAType::upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest1d_backward_out_cuda(grad_input, grad_output, output_size, input_size);
}
Tensor CUDAType::upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest1d_backward_cuda(grad_output, output_size, input_size);
}
Tensor & CUDAType::upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_out_cuda(out, self, output_size);
}
Tensor CUDAType::upsample_nearest2d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_nearest2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_cuda(self, output_size);
}
Tensor & CUDAType::upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest2d_backward_out_cuda(grad_input, grad_output, output_size, input_size);
}
Tensor CUDAType::upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest2d_backward_cuda(grad_output, output_size, input_size);
}
Tensor & CUDAType::upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest3d_out_cuda(out, self, output_size);
}
Tensor CUDAType::upsample_nearest3d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_nearest3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest3d_cuda(self, output_size);
}
Tensor & CUDAType::upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest3d_backward_out_cuda(grad_input, grad_output, output_size, input_size);
}
Tensor CUDAType::upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest3d_backward_cuda(grad_output, output_size, input_size);
}
Tensor & CUDAType::sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("sigmoid_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::legacy::cuda::_thnn_sigmoid_backward_out(grad_input, grad_output, output);
}
Tensor CUDAType::sigmoid_backward(const Tensor & grad_output, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("sigmoid_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cuda::_thnn_sigmoid_backward(grad_output, output);
}
Tensor & CUDAType::tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("tanh_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::legacy::cuda::_thnn_tanh_backward_out(grad_input, grad_output, output);
}
Tensor CUDAType::tanh_backward(const Tensor & grad_output, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("tanh_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cuda::_thnn_tanh_backward(grad_output, output);
}
Tensor & CUDAType::slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_out_cuda(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor CUDAType::slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_cuda(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAType::slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || columns.has_names() || ones.has_names()) {
        AT_ERROR("slow_conv_transpose2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_backward_out_cuda(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names() || columns.has_names() || ones.has_names()) {
        AT_ERROR("slow_conv_transpose2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_backward_cuda(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
}
Tensor & CUDAType::slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_out_cuda(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor CUDAType::slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_cuda(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAType::slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("slow_conv_transpose3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_backward_out_cuda(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("slow_conv_transpose3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_backward_cuda(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAType::thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || finput.has_names() || fgrad_input.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv2d_forward_out(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv2d_forward(self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAType::thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("thnn_conv2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv2d_backward_out(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("thnn_conv2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv2d_backward(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
Tensor & CUDAType::thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv_depthwise2d_forward_out(out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor CUDAType::thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv_depthwise2d_forward(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor &,Tensor &> CUDAType::thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_weight.has_names() || grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv_depthwise2d_backward_out(grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation);
}
std::tuple<Tensor,Tensor> CUDAType::thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cuda::_thnn_conv_depthwise2d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor CUDAType::slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_dilated2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated2d_cuda(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("slow_conv_dilated2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated2d_backward_cuda(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor CUDAType::slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_dilated3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated3d_cuda(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> CUDAType::slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("slow_conv_dilated3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated3d_backward_cuda(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor & CUDAType::col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("col2im_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::col2im_out_cuda(out, self, output_size, kernel_size, dilation, padding, stride);
}
Tensor CUDAType::col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("col2im: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::col2im_cuda(self, output_size, kernel_size, dilation, padding, stride);
}
Tensor & CUDAType::col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("col2im_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::col2im_backward_out_cuda(grad_input, grad_output, kernel_size, dilation, padding, stride);
}
Tensor CUDAType::col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("col2im_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::col2im_backward_cuda(grad_output, kernel_size, dilation, padding, stride);
}
Tensor & CUDAType::im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("im2col_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::im2col_out_cuda(out, self, kernel_size, dilation, padding, stride);
}
Tensor CUDAType::im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("im2col: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::im2col_cuda(self, kernel_size, dilation, padding, stride);
}
Tensor & CUDAType::im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("im2col_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::im2col_backward_out_cuda(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);
}
Tensor CUDAType::im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("im2col_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::im2col_backward_cuda(grad_output, input_size, kernel_size, dilation, padding, stride);
}

static auto& registerer = globalATenDispatch()
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)", &CUDAType::_cudnn_ctc_loss)
  .registerOp<Tensor (TensorList, int64_t, int64_t, int64_t, int64_t, int64_t, bool, bool)>(Backend::CUDA, "aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor", &CUDAType::_cudnn_rnn_flatten_weight)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)", &CUDAType::_cudnn_rnn)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,4>)>(Backend::CUDA, "aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])", &CUDAType::_cudnn_rnn_backward)
  .registerOp<Tensor (double, bool, int64_t, const TensorOptions &)>(Backend::CUDA, "aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor", &CUDAType::_cudnn_init_dropout_state)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, double, Generator *)>(Backend::CUDA, "aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)", &CUDAType::_fused_dropout)
  .registerOp<Tensor (const Tensor &, const Tensor &, double)>(Backend::CUDA, "aten::_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor", &CUDAType::_masked_scale)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::abs_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::abs_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::abs_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::acos_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::acos_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::acos_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor", &CUDAType::add)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)", &CUDAType::add_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::add_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &CUDAType::addmv)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &CUDAType::addmv_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::addmv_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, Scalar)>(Backend::CUDA, "aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::arange_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>(Backend::CUDA, "aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)", &CUDAType::as_strided)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::asin_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::asin_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::asin_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::atan_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::atan_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::atan_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &CUDAType::baddbmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &CUDAType::baddbmm_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::baddbmm_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, Generator *)>(Backend::CUDA, "aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::bernoulli_)
  .registerOp<Tensor & (Tensor &, double, Generator *)>(Backend::CUDA, "aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::bernoulli_)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor", &CUDAType::bincount)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::bitwise_not_out)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::logical_not_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::logical_xor_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::bmm(Tensor self, Tensor mat2) -> Tensor", &CUDAType::bmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::bmm_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::ceil_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::ceil_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::ceil_out)
  .registerOp<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>(Backend::CUDA, "aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)", &CUDAType::clamp_)
  .registerOp<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>(Backend::CUDA, "aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::clamp_out)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)", &CUDAType::clamp_max_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::clamp_max_out)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)", &CUDAType::clamp_min_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::clamp_min_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::cos_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::cos_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::cos_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::cosh_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::cosh_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::cosh_out)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t)>(Backend::CUDA, "aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid", &CUDAType::cudnn_affine_grid_generator)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t)>(Backend::CUDA, "aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta", &CUDAType::cudnn_affine_grid_generator_backward)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>(Backend::CUDA, "aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)", &CUDAType::cudnn_batch_norm)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double)>(Backend::CUDA, "aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)", &CUDAType::cudnn_batch_norm_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::cudnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::cudnn_convolution)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::cudnn_convolution_backward_input)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>(Backend::CUDA, "aten::cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &CUDAType::cudnn_convolution_backward)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::cudnn_convolution_backward_bias(Tensor grad_output) -> Tensor", &CUDAType::cudnn_convolution_backward_bias)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::cudnn_convolution_backward_weight)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::cudnn_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::cudnn_convolution_transpose)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>(Backend::CUDA, "aten::cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &CUDAType::cudnn_convolution_transpose_backward)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::cudnn_convolution_transpose_backward_bias(Tensor grad_output) -> Tensor", &CUDAType::cudnn_convolution_transpose_backward_bias)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::cudnn_convolution_transpose_backward_input)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::cudnn_convolution_transpose_backward_weight)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output", &CUDAType::cudnn_grid_sampler)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)", &CUDAType::cudnn_grid_sampler_backward)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool)>(Backend::CUDA, "aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)", &CUDAType::_ctc_loss)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor", &CUDAType::_ctc_loss_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::dot(Tensor self, Tensor tensor) -> Tensor", &CUDAType::dot)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(Backend::CUDA, "aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor", &CUDAType::embedding_dense_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, double, double)>(Backend::CUDA, "aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)", &CUDAType::embedding_renorm_)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &)>(Backend::CUDA, "aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)", &CUDAType::_embedding_bag)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &)>(Backend::CUDA, "aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor", &CUDAType::_embedding_bag_dense_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor", &CUDAType::_embedding_bag_per_sample_weights_backward)
  .registerOp<Tensor (IntArrayRef, const TensorOptions &, c10::optional<MemoryFormat>)>(Backend::CUDA, "aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor", &CUDAType::empty)
  .registerOp<Tensor & (Tensor &, IntArrayRef)>(Backend::CUDA, "aten::resize_(Tensor(a!) self, int[] size) -> Tensor(a!)", &CUDAType::resize_)
  .registerOp<Tensor (IntArrayRef, IntArrayRef, const TensorOptions &)>(Backend::CUDA, "aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &CUDAType::empty_strided)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::erf_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::erf_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::erf_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::erfc_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::erfc_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::erfc_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::exp_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::exp_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::exp_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::expm1_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::expm1_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::expm1_out)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::CUDA, "aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::eye_out)
  .registerOp<Tensor & (Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::eye_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::floor_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::floor_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::floor_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::frac_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::frac_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::frac_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode) -> Tensor", &CUDAType::grid_sampler_2d)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode) -> (Tensor, Tensor)", &CUDAType::grid_sampler_2d_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode) -> Tensor", &CUDAType::grid_sampler_3d)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode) -> (Tensor, Tensor)", &CUDAType::grid_sampler_3d_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::ger(Tensor self, Tensor vec2) -> Tensor", &CUDAType::ger)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::ger_out)
  .registerOp<Tensor (const Tensor &, int64_t, bool, bool, bool, IntArrayRef, bool, bool, IntArrayRef)>(Backend::CUDA, "aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor", &CUDAType::_fft_with_size)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::_inverse_helper(Tensor self) -> Tensor", &CUDAType::_inverse_helper)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean) -> Tensor", &CUDAType::kl_div_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool)>(Backend::CUDA, "aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)", &CUDAType::kthvalue_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, int64_t)>(Backend::CUDA, "aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::linspace_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::log_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::log_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::log_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::log10_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::log10_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::log10_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::log1p_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::log1p_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::log1p_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::log2_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::log2_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::log2_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, int64_t, double)>(Backend::CUDA, "aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::logspace_out)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor", &CUDAType::_log_softmax)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor", &CUDAType::_log_softmax_backward_data)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>(Backend::CUDA, "aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)", &CUDAType::miopen_batch_norm)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double)>(Backend::CUDA, "aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)", &CUDAType::miopen_batch_norm_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_convolution)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_convolution_backward_input)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>(Backend::CUDA, "aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &CUDAType::miopen_convolution_backward)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::miopen_convolution_backward_bias(Tensor grad_output) -> Tensor", &CUDAType::miopen_convolution_backward_bias)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_convolution_backward_weight)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_convolution_transpose)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>(Backend::CUDA, "aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &CUDAType::miopen_convolution_transpose_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_convolution_transpose_backward_input)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_convolution_transpose_backward_weight)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_depthwise_convolution)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_depthwise_convolution_backward_input)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>(Backend::CUDA, "aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &CUDAType::miopen_depthwise_convolution_backward)
  .registerOp<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>(Backend::CUDA, "aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor", &CUDAType::miopen_depthwise_convolution_backward_weight)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)", &CUDAType::miopen_rnn)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,4>)>(Backend::CUDA, "aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])", &CUDAType::miopen_rnn_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::mm(Tensor self, Tensor mat2) -> Tensor", &CUDAType::mm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::mm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::mul.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::mul)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::mul_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::mul_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::mv(Tensor self, Tensor vec) -> Tensor", &CUDAType::mv)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::mv_out)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::CUDA, "aten::narrow_copy(Tensor self, int dim, int start, int length) -> Tensor", &CUDAType::narrow_copy)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>(Backend::CUDA, "aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)", &CUDAType::native_batch_norm)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, double)>(Backend::CUDA, "aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)", &CUDAType::batch_norm_stats)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double)>(Backend::CUDA, "aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor", &CUDAType::batch_norm_elemt)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, int64_t)>(Backend::CUDA, "aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)", &CUDAType::batch_norm_gather_stats)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, IntArrayRef)>(Backend::CUDA, "aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor)", &CUDAType::batch_norm_gather_stats_with_counts)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>)>(Backend::CUDA, "aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &CUDAType::native_batch_norm_backward)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool, bool)>(Backend::CUDA, "aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)", &CUDAType::batch_norm_backward_reduce)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor", &CUDAType::batch_norm_backward_elemt)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, double)>(Backend::CUDA, "aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)", &CUDAType::batch_norm_update_stats)
  .registerOp<Tensor & (Tensor &, int64_t, Generator *)>(Backend::CUDA, "aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)", &CUDAType::randperm_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, Scalar)>(Backend::CUDA, "aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::range_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::reciprocal_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::reciprocal_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::reciprocal_out)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::neg_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::repeat_interleave.Tensor(Tensor repeats) -> Tensor", &CUDAType::repeat_interleave)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::round_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::round_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::round_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::relu(Tensor self) -> Tensor", &CUDAType::relu)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::relu_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::relu_)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::prelu(Tensor self, Tensor weight) -> Tensor", &CUDAType::prelu)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)", &CUDAType::prelu_backward)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::gelu(Tensor self) -> Tensor", &CUDAType::gelu)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::gelu_backward(Tensor grad, Tensor self) -> Tensor", &CUDAType::gelu_backward)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor", &CUDAType::hardshrink)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor", &CUDAType::hardshrink_backward)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::rsqrt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::rsqrt_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::sigmoid(Tensor self) -> Tensor", &CUDAType::sigmoid)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::sigmoid_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::sigmoid_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::sigmoid_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::sin_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::sin_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::sin_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::sinh_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::sinh_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::sinh_out)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_softmax(Tensor self, int dim, bool half_to_float) -> Tensor", &CUDAType::_softmax)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor", &CUDAType::_softmax_backward_data)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::_sparse_dense_add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::_sparse_dense_add_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::sspaddmm_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::sqrt_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::sqrt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::sqrt_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::tan_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::tan_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::tan_out)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::tanh_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::tanh_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::tanh_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::flip(Tensor self, int[] dims) -> Tensor", &CUDAType::flip)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor", &CUDAType::roll)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::trunc_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::trunc_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::trunc_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool)>(Backend::CUDA, "aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)", &CUDAType::_unique)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, int64_t, bool, bool, bool)>(Backend::CUDA, "aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)", &CUDAType::unique_dim)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)", &CUDAType::unique_consecutive)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, int64_t, bool, bool)>(Backend::CUDA, "aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)", &CUDAType::unique_dim_consecutive)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool, bool)>(Backend::CUDA, "aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)", &CUDAType::_unique2)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor", &CUDAType::_s_where)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)", &CUDAType::_weight_norm_cuda_interface)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)", &CUDAType::_weight_norm_cuda_interface_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_standard_gamma_grad(Tensor self, Tensor output) -> Tensor", &CUDAType::_standard_gamma_grad)
  .registerOp<Tensor (const Tensor &, Generator *)>(Backend::CUDA, "aten::_standard_gamma(Tensor self, Generator? generator=None) -> Tensor", &CUDAType::_standard_gamma)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor", &CUDAType::_dirichlet_grad)
  .registerOp<Tensor (const Tensor &, Generator *)>(Backend::CUDA, "aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor", &CUDAType::_sample_dirichlet)
  .registerOp<Tensor (const Tensor &, Generator *)>(Backend::CUDA, "aten::poisson(Tensor self, Generator? generator=None) -> Tensor", &CUDAType::poisson)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::clone(Tensor self) -> Tensor", &CUDAType::clone)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::resize_as_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)", &CUDAType::resize_as_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::pow_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor", &CUDAType::pow)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::zero_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::zero_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::s_native_addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::s_native_addmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::s_native_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &CUDAType::s_native_addmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::s_native_addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &CUDAType::s_native_addmm_)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::sparse_mask(Tensor self, Tensor mask) -> Tensor", &CUDAType::sparse_mask)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::CUDA, "aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor", &CUDAType::to_sparse)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::to_sparse(Tensor self) -> Tensor", &CUDAType::to_sparse)
  .registerOp<Tensor (const Tensor &, double, int64_t, int64_t, int64_t)>(Backend::CUDA, "aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor", &CUDAType::fake_quantize_per_tensor_affine)
  .registerOp<Tensor (const Tensor &, const Tensor &, double, int64_t, int64_t, int64_t)>(Backend::CUDA, "aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor", &CUDAType::fake_quantize_per_tensor_affine_backward)
  .registerOp<Scalar (const Tensor &)>(Backend::CUDA, "aten::_local_scalar_dense(Tensor self) -> Scalar", &CUDAType::_local_scalar_dense)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)", &CUDAType::_thnn_fused_lstm_cell)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool)>(Backend::CUDA, "aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)", &CUDAType::_thnn_fused_lstm_cell_backward)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)", &CUDAType::_thnn_fused_gru_cell)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, bool)>(Backend::CUDA, "aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)", &CUDAType::_thnn_fused_gru_cell_backward)
  .registerOp<Tensor & (Tensor &, Storage)>(Backend::CUDA, "aten::set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)", &CUDAType::set_)
  .registerOp<Tensor & (Tensor &, Storage, int64_t, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)", &CUDAType::set_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)", &CUDAType::set_)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::set_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::set_)
  .registerOp<bool (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::is_set_to(Tensor self, Tensor tensor) -> bool", &CUDAType::is_set_to)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)", &CUDAType::masked_fill_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)", &CUDAType::masked_fill_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)", &CUDAType::masked_scatter_)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::view(Tensor(a) self, int[] size) -> Tensor(a)", &CUDAType::view)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, bool)>(Backend::CUDA, "aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)", &CUDAType::put_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)", &CUDAType::index_add_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, Scalar)>(Backend::CUDA, "aten::index_fill_.Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)", &CUDAType::index_fill_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::index_fill_.Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)", &CUDAType::index_fill_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)", &CUDAType::scatter_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, Scalar)>(Backend::CUDA, "aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)", &CUDAType::scatter_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)", &CUDAType::scatter_add_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::lt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::lt_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::gt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::gt_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::le_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::le_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::ge_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::ge_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::eq_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::eq_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::ne_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::ne_)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::__and__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::__and__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::__iand__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::__iand__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::__or__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::__or__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::__ior__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::__ior__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::__xor__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::__xor__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::__ixor__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::__ixor__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::__lshift__.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::__lshift__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::__lshift__.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::__lshift__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::__ilshift__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::__ilshift__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::__rshift__.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::__rshift__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::__rshift__.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::__rshift__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::__irshift__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::__irshift__)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::lgamma_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::lgamma_)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::CUDA, "aten::tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)", &CUDAType::tril_)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::CUDA, "aten::triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)", &CUDAType::triu_)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::digamma_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::digamma_)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::CUDA, "aten::polygamma_(Tensor(a!) self, int n) -> Tensor(a!)", &CUDAType::polygamma_)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::erfinv_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::erfinv_)
  .registerOp<Tensor & (Tensor &, Scalar, int64_t, Scalar)>(Backend::CUDA, "aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)", &CUDAType::renorm_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)", &CUDAType::pow_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)", &CUDAType::pow_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)", &CUDAType::lerp_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)", &CUDAType::lerp_)
  .registerOp<Tensor & (Tensor &)>(Backend::CUDA, "aten::sign_(Tensor(a!) self) -> Tensor(a!)", &CUDAType::sign_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::fmod_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::fmod_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &CUDAType::remainder_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &CUDAType::remainder_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &CUDAType::addbmm_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::addbmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &CUDAType::addbmm)
  .registerOp<Tensor & (Tensor &, int64_t, int64_t, Generator *)>(Backend::CUDA, "aten::random_.from(Tensor(a!) self, int from, int to, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::random_)
  .registerOp<Tensor & (Tensor &, int64_t, Generator *)>(Backend::CUDA, "aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::random_)
  .registerOp<Tensor & (Tensor &, Generator *)>(Backend::CUDA, "aten::random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::random_)
  .registerOp<Tensor & (Tensor &, double, double, Generator *)>(Backend::CUDA, "aten::uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::uniform_)
  .registerOp<Tensor & (Tensor &, double, double, Generator *)>(Backend::CUDA, "aten::normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::normal_)
  .registerOp<Tensor & (Tensor &, double, double, Generator *)>(Backend::CUDA, "aten::cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::cauchy_)
  .registerOp<Tensor & (Tensor &, double, double, Generator *)>(Backend::CUDA, "aten::log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::log_normal_)
  .registerOp<Tensor & (Tensor &, double, Generator *)>(Backend::CUDA, "aten::exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::exponential_)
  .registerOp<Tensor & (Tensor &, double, Generator *)>(Backend::CUDA, "aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)", &CUDAType::geometric_)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::diag_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::CUDA, "aten::diag(Tensor self, int diagonal=0) -> Tensor", &CUDAType::diag)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::triu_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::tril_out)
  .registerOp<Tensor (int64_t, int64_t, int64_t, const TensorOptions &)>(Backend::CUDA, "aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &CUDAType::tril_indices)
  .registerOp<Tensor (int64_t, int64_t, int64_t, const TensorOptions &)>(Backend::CUDA, "aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &CUDAType::triu_indices)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::trace(Tensor self) -> Tensor", &CUDAType::trace)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::ne_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::ne.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::ne)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::ne_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::ne.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::ne)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::eq_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::eq.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::eq)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::eq_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::eq.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::eq)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::ge_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::ge.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::ge)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::ge_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::ge.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::ge)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::le_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::le.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::le)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::le_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::le.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::le)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::gt_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::gt.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::gt)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::gt_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::gt.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::gt)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::lt_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::lt.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::lt)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::lt_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lt.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::lt)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::take_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::take(Tensor self, Tensor index) -> Tensor", &CUDAType::take)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::index_select_out)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::index_select(Tensor self, int dim, Tensor index) -> Tensor", &CUDAType::index_select)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::masked_select_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::masked_select(Tensor self, Tensor mask) -> Tensor", &CUDAType::masked_select)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::nonzero_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::nonzero(Tensor self) -> Tensor", &CUDAType::nonzero)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, const Tensor &, bool)>(Backend::CUDA, "aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)", &CUDAType::gather_out)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, bool)>(Backend::CUDA, "aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor", &CUDAType::gather)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)", &CUDAType::lstsq_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)", &CUDAType::lstsq)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, bool, bool)>(Backend::CUDA, "aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)", &CUDAType::_triangular_solve_helper)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool)>(Backend::CUDA, "aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)", &CUDAType::_symeig_helper)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool)>(Backend::CUDA, "aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)", &CUDAType::eig_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool)>(Backend::CUDA, "aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)", &CUDAType::eig)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool)>(Backend::CUDA, "aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)", &CUDAType::_svd_helper)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::CUDA, "aten::_cholesky_helper(Tensor self, bool upper) -> Tensor", &CUDAType::_cholesky_helper)
  .registerOp<Tensor (const Tensor &, const Tensor &, bool)>(Backend::CUDA, "aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor", &CUDAType::_cholesky_solve_helper)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)", &CUDAType::_solve_helper)
  .registerOp<Tensor & (Tensor &, const Tensor &, bool)>(Backend::CUDA, "aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::cholesky_inverse_out)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::CUDA, "aten::cholesky_inverse(Tensor self, bool upper=False) -> Tensor", &CUDAType::cholesky_inverse)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, bool)>(Backend::CUDA, "aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)", &CUDAType::_qr_helper)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &)>(Backend::CUDA, "aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)", &CUDAType::geqrf_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &)>(Backend::CUDA, "aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)", &CUDAType::geqrf)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool)>(Backend::CUDA, "aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)", &CUDAType::_lu_with_info)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor", &CUDAType::_lu_solve_helper)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, bool, Generator *)>(Backend::CUDA, "aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)", &CUDAType::multinomial_out)
  .registerOp<Tensor (const Tensor &, int64_t, bool, Generator *)>(Backend::CUDA, "aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor", &CUDAType::multinomial)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &)>(Backend::CUDA, "aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)", &CUDAType::_multinomial_alias_setup)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, Generator *)>(Backend::CUDA, "aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor", &CUDAType::_multinomial_alias_draw)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::lgamma_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::lgamma(Tensor self) -> Tensor", &CUDAType::lgamma)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::digamma_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::digamma(Tensor self) -> Tensor", &CUDAType::digamma)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::polygamma_out)
  .registerOp<Tensor (int64_t, const Tensor &)>(Backend::CUDA, "aten::polygamma(int n, Tensor self) -> Tensor", &CUDAType::polygamma)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::erfinv_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::erfinv(Tensor self) -> Tensor", &CUDAType::erfinv)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::dist(Tensor self, Tensor other, Scalar p=2) -> Tensor", &CUDAType::dist)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::lerp_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::lerp_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor", &CUDAType::lerp)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor", &CUDAType::lerp)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, Scalar, Scalar)>(Backend::CUDA, "aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::histc_out)
  .registerOp<Tensor (const Tensor &, int64_t, Scalar, Scalar)>(Backend::CUDA, "aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor", &CUDAType::histc)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::CUDA, "aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::sign_out)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::sign(Tensor self) -> Tensor", &CUDAType::sign)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::fmod_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::fmod.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::fmod)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::fmod_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::fmod.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::fmod)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::remainder_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::remainder.Scalar(Tensor self, Scalar other) -> Tensor", &CUDAType::remainder)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::remainder_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::remainder.Tensor(Tensor self, Tensor other) -> Tensor", &CUDAType::remainder)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::min_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::min.other(Tensor self, Tensor other) -> Tensor", &CUDAType::min)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::min(Tensor self) -> Tensor", &CUDAType::min)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::max_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::max.other(Tensor self, Tensor other) -> Tensor", &CUDAType::max)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::max(Tensor self) -> Tensor", &CUDAType::max)
  .registerOp<Tensor (const Tensor &)>(Backend::CUDA, "aten::median(Tensor self) -> Tensor", &CUDAType::median)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)", &CUDAType::sort_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)", &CUDAType::sort)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>(Backend::CUDA, "aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)", &CUDAType::topk_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, int64_t, Scalar)>(Backend::CUDA, "aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::renorm_out)
  .registerOp<Tensor (const Tensor &, Scalar, int64_t, Scalar)>(Backend::CUDA, "aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor", &CUDAType::renorm)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::CUDA, "aten::unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)", &CUDAType::unfold)
  .registerOp<bool (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::equal(Tensor self, Tensor other) -> bool", &CUDAType::equal)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::pow_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor", &CUDAType::pow)
  .registerOp<Tensor & (Tensor &, Scalar, const Tensor &)>(Backend::CUDA, "aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::pow_out)
  .registerOp<Tensor (Scalar, const Tensor &)>(Backend::CUDA, "aten::pow.Scalar(Scalar self, Tensor exponent) -> Tensor", &CUDAType::pow)
  .registerOp<Tensor & (Tensor &, const Tensor &, double, Generator *)>(Backend::CUDA, "aten::normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)", &CUDAType::normal_out)
  .registerOp<Tensor (const Tensor &, double, Generator *)>(Backend::CUDA, "aten::normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor", &CUDAType::normal)
  .registerOp<Tensor & (Tensor &, double, const Tensor &, Generator *)>(Backend::CUDA, "aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)", &CUDAType::normal_out)
  .registerOp<Tensor (double, const Tensor &, Generator *)>(Backend::CUDA, "aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor", &CUDAType::normal)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Generator *)>(Backend::CUDA, "aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)", &CUDAType::normal_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Generator *)>(Backend::CUDA, "aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor", &CUDAType::normal)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &CUDAType::_addr)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &CUDAType::_addr_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::_addr_out)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)", &CUDAType::_index_copy_)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::CUDA, "aten::_cumsum(Tensor self, int dim) -> Tensor", &CUDAType::_cumsum)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::_cumsum_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::CUDA, "aten::_cumprod(Tensor self, int dim) -> Tensor", &CUDAType::_cumprod)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::_cumprod_out)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::CUDA, "aten::_var(Tensor self, bool unbiased=True) -> Tensor", &CUDAType::_var)
  .registerOp<Tensor (const Tensor &, bool)>(Backend::CUDA, "aten::_std(Tensor self, bool unbiased=True) -> Tensor", &CUDAType::_std)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::_addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &CUDAType::_addmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &CUDAType::_addmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::_addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &CUDAType::_addmm_)
  .registerOp<Tensor (TensorList, int64_t)>(Backend::CUDA, "aten::_cat(Tensor[] tensors, int dim=0) -> Tensor", &CUDAType::_cat)
  .registerOp<Tensor & (Tensor &, TensorList, int64_t)>(Backend::CUDA, "aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::_cat_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)", &CUDAType::_mode)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::_mode_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)", &CUDAType::_max)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::_max_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)", &CUDAType::_min)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::CUDA, "aten::_min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::_min_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::binary_cross_entropy_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor", &CUDAType::binary_cross_entropy)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::binary_cross_entropy_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor", &CUDAType::binary_cross_entropy_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::mse_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &CUDAType::mse_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::mse_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor", &CUDAType::mse_loss_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::l1_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &CUDAType::l1_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::l1_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor", &CUDAType::l1_loss_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>(Backend::CUDA, "aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::multi_margin_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>(Backend::CUDA, "aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor", &CUDAType::multi_margin_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>(Backend::CUDA, "aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::multi_margin_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>(Backend::CUDA, "aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor", &CUDAType::multi_margin_loss_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))", &CUDAType::multilabel_margin_loss_forward_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)", &CUDAType::multilabel_margin_loss_forward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::multilabel_margin_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::CUDA, "aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor", &CUDAType::multilabel_margin_loss_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))", &CUDAType::nll_loss_forward_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)", &CUDAType::nll_loss_forward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>(Backend::CUDA, "aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::nll_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>(Backend::CUDA, "aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor", &CUDAType::nll_loss_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))", &CUDAType::nll_loss2d_forward_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::CUDA, "aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)", &CUDAType::nll_loss2d_forward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>(Backend::CUDA, "aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::nll_loss2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>(Backend::CUDA, "aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor", &CUDAType::nll_loss2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::smooth_l1_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &CUDAType::smooth_l1_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::smooth_l1_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor", &CUDAType::smooth_l1_loss_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::soft_margin_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &CUDAType::soft_margin_loss)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::soft_margin_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor", &CUDAType::soft_margin_loss_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, Scalar)>(Backend::CUDA, "aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::elu_out)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar, Scalar)>(Backend::CUDA, "aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor", &CUDAType::elu)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, Scalar, const Tensor &)>(Backend::CUDA, "aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::elu_backward_out)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar, Scalar, const Tensor &)>(Backend::CUDA, "aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor", &CUDAType::elu_backward)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, Scalar)>(Backend::CUDA, "aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)", &CUDAType::elu_)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::glu_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::CUDA, "aten::glu(Tensor self, int dim=-1) -> Tensor", &CUDAType::glu)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::glu_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::CUDA, "aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor", &CUDAType::glu_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::hardtanh_out)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor", &CUDAType::hardtanh)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::hardtanh_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor", &CUDAType::hardtanh_backward)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)", &CUDAType::hardtanh_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::leaky_relu_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor", &CUDAType::leaky_relu)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::leaky_relu_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope) -> Tensor", &CUDAType::leaky_relu_backward)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::CUDA, "aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)", &CUDAType::leaky_relu_)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &)>(Backend::CUDA, "aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))", &CUDAType::log_sigmoid_forward_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &)>(Backend::CUDA, "aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)", &CUDAType::log_sigmoid_forward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::log_sigmoid_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor", &CUDAType::log_sigmoid_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, Generator *)>(Backend::CUDA, "aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::rrelu_with_noise_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, bool, Generator *)>(Backend::CUDA, "aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor", &CUDAType::rrelu_with_noise)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool)>(Backend::CUDA, "aten::rrelu_with_noise_backward.grad_input(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::rrelu_with_noise_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool)>(Backend::CUDA, "aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training) -> Tensor", &CUDAType::rrelu_with_noise_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, bool, Generator *)>(Backend::CUDA, "aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)", &CUDAType::rrelu_with_noise_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::softplus_out)
  .registerOp<Tensor (const Tensor &, Scalar, Scalar)>(Backend::CUDA, "aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor", &CUDAType::softplus)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(Backend::CUDA, "aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::softplus_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(Backend::CUDA, "aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor", &CUDAType::softplus_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::softshrink_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::CUDA, "aten::softshrink(Tensor self, Scalar lambd=0.5) -> Tensor", &CUDAType::softshrink)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::softshrink_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::CUDA, "aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor", &CUDAType::softshrink_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::adaptive_avg_pool2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor", &CUDAType::_adaptive_avg_pool2d)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor", &CUDAType::_adaptive_avg_pool2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::adaptive_avg_pool3d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor", &CUDAType::adaptive_avg_pool3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::adaptive_avg_pool3d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor", &CUDAType::adaptive_avg_pool3d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::adaptive_max_pool2d_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)", &CUDAType::adaptive_max_pool2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::adaptive_max_pool2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor", &CUDAType::adaptive_max_pool2d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::adaptive_max_pool3d_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)", &CUDAType::adaptive_max_pool3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::adaptive_max_pool3d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor", &CUDAType::adaptive_max_pool3d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::avg_pool2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor", &CUDAType::avg_pool2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::avg_pool2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor", &CUDAType::avg_pool2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::avg_pool3d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor", &CUDAType::avg_pool3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::avg_pool3d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::CUDA, "aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor", &CUDAType::avg_pool3d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::fractional_max_pool2d_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)", &CUDAType::fractional_max_pool2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::fractional_max_pool2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor", &CUDAType::fractional_max_pool2d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::fractional_max_pool3d_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)", &CUDAType::fractional_max_pool3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::fractional_max_pool3d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>(Backend::CUDA, "aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor", &CUDAType::fractional_max_pool3d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::max_pool2d_with_indices_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)", &CUDAType::max_pool2d_with_indices)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>(Backend::CUDA, "aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::max_pool2d_with_indices_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>(Backend::CUDA, "aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor", &CUDAType::max_pool2d_with_indices_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &CUDAType::max_pool3d_with_indices_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)", &CUDAType::max_pool3d_with_indices)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>(Backend::CUDA, "aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::max_pool3d_with_indices_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>(Backend::CUDA, "aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor", &CUDAType::max_pool3d_with_indices_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::max_unpool2d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor", &CUDAType::max_unpool2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::max_unpool2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor", &CUDAType::max_unpool2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::max_unpool3d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor", &CUDAType::max_unpool3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::max_unpool3d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor", &CUDAType::max_unpool3d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::reflection_pad1d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad1d(Tensor self, int[2] padding) -> Tensor", &CUDAType::reflection_pad1d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::reflection_pad1d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor", &CUDAType::reflection_pad1d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::reflection_pad2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad2d(Tensor self, int[4] padding) -> Tensor", &CUDAType::reflection_pad2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::reflection_pad2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor", &CUDAType::reflection_pad2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::replication_pad1d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad1d(Tensor self, int[2] padding) -> Tensor", &CUDAType::replication_pad1d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::replication_pad1d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor", &CUDAType::replication_pad1d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::replication_pad2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad2d(Tensor self, int[4] padding) -> Tensor", &CUDAType::replication_pad2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::replication_pad2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor", &CUDAType::replication_pad2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::replication_pad3d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad3d(Tensor self, int[6] padding) -> Tensor", &CUDAType::replication_pad3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::replication_pad3d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor", &CUDAType::replication_pad3d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_linear1d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners) -> Tensor", &CUDAType::upsample_linear1d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_linear1d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners) -> Tensor", &CUDAType::upsample_linear1d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_bilinear2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners) -> Tensor", &CUDAType::upsample_bilinear2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_bilinear2d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> Tensor", &CUDAType::upsample_bilinear2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_bicubic2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners) -> Tensor", &CUDAType::upsample_bicubic2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_bicubic2d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> Tensor", &CUDAType::upsample_bicubic2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_trilinear3d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners) -> Tensor", &CUDAType::upsample_trilinear3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_trilinear3d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool)>(Backend::CUDA, "aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners) -> Tensor", &CUDAType::upsample_trilinear3d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest1d.out(Tensor self, int[1] output_size, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_nearest1d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest1d(Tensor self, int[1] output_size) -> Tensor", &CUDAType::upsample_nearest1d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_nearest1d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size) -> Tensor", &CUDAType::upsample_nearest1d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_nearest2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest2d(Tensor self, int[2] output_size) -> Tensor", &CUDAType::upsample_nearest2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_nearest2d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size) -> Tensor", &CUDAType::upsample_nearest2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::upsample_nearest3d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest3d(Tensor self, int[3] output_size) -> Tensor", &CUDAType::upsample_nearest3d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::upsample_nearest3d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size) -> Tensor", &CUDAType::upsample_nearest3d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::sigmoid_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor", &CUDAType::sigmoid_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::tanh_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::CUDA, "aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor", &CUDAType::tanh_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::slow_conv_transpose2d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor", &CUDAType::slow_conv_transpose2d)
  .registerOp<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))", &CUDAType::slow_conv_transpose2d_backward_out)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>(Backend::CUDA, "aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)", &CUDAType::slow_conv_transpose2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::slow_conv_transpose3d_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor", &CUDAType::slow_conv_transpose3d)
  .registerOp<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))", &CUDAType::slow_conv_transpose3d_backward_out)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>(Backend::CUDA, "aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)", &CUDAType::slow_conv_transpose3d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))", &CUDAType::thnn_conv2d_forward_out)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)", &CUDAType::thnn_conv2d_forward)
  .registerOp<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>(Backend::CUDA, "aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))", &CUDAType::thnn_conv2d_backward_out)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>(Backend::CUDA, "aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)", &CUDAType::thnn_conv2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::thnn_conv_depthwise2d_forward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor", &CUDAType::thnn_conv_depthwise2d_forward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight) -> (Tensor(a!), Tensor(b!))", &CUDAType::thnn_conv_depthwise2d_backward_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,2>)>(Backend::CUDA, "aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)", &CUDAType::thnn_conv_depthwise2d_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor", &CUDAType::slow_conv_dilated2d)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>)>(Backend::CUDA, "aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)", &CUDAType::slow_conv_dilated2d_backward)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor", &CUDAType::slow_conv_dilated3d)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>)>(Backend::CUDA, "aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)", &CUDAType::slow_conv_dilated3d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::col2im_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor", &CUDAType::col2im)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::col2im_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor", &CUDAType::col2im_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)", &CUDAType::im2col_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor", &CUDAType::im2col)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)", &CUDAType::im2col_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>(Backend::CUDA, "aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor", &CUDAType::im2col_backward);
}
